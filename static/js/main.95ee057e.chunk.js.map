{"version":3,"sources":["BabylonCanvas.js","Globals.js","components/Navbar.js","components/uiElements/AddBlockModal.js","components/gameObjects/_ENVIRONMENT.js","components/gameObjects/StoneBlock.js","components/gameObjects/GrassBlock.js","components/gameObjects/Character.js","components/uiElements/AddBlockButton.js","components/uiElements/DeleteBlockButton.js","components/uiElements/WalkBlock.js","components/uiElements/TurnBlock.js","components/uiElements/LoopBlock.js","components/uiElements/IfBlock.js","components/codeEngine/CodeEngine.js","components/uiElements/LevelTitle.js","components/uiElements/LevelInstructions.js","components/gameObjects/ObjectivePoint.js","components/levels/LevelOne.js","App.js","reportWebVitals.js","index.js"],"names":["scene","boxMesh","this","undefined","engine","framerate","character","addBlockModal","currentLevel","codeEngine","BabylonCanvas","props","componentDidMount","BABYLON","canvas","Globals","addLight","addCamera","addSkybox","window","addEventListener","onWindowResize","onKeydownEvent","runRenderLoop","render","registerBeforeRender","event","resize","keyCode","debugLayer","show","hide","hemisphericLight","underMapLighting","Math","PI","photoSphere","CreateSphere","skyboxMaterial","emissiveTexture","diffuseColor","specularColor","uOffset","backFaceCulling","material","arcRotateCamera","panningSensibility","lowerRadiusLimit","upperRadiusLimit","attachControl","setPosition","beta","addGround","ground","CreateGround","height","width","subdivisions","groundMaterial","diffuseTexture","addModels","CreateBox","depth","position","y","woodMaterial","state","useWireFrame","shouldAnimate","removeEventListener","className","ref","Component","Navbar","href","AddBlockModal","onChangeSelection","setState","selectedBlockType","target","value","onCancelClicked","onAddButtonClicked","console","log","addBlock","parentBlockIndex","id","tabIndex","role","aria-labelledby","aria-hidden","type","checked","onChange","data-dismiss","disabled","onClick","Object","freeze","NONE","STONE","GRASS","PATH","OBJECTIVE","WALKABLE_BLOCKS","StoneBlock","createMesh","applyMaterial","startSpawnAnimation","componentWillUnmount","mesh","dispose","posX","posY","posZ","x","z","updateSamplingMode","NEAREST_NEAREST_MIPLINEAR","spawnAnimation","ANIMATIONTYPE_VECTOR3","ANIMATIONLOOPMODE_CYCLE","animationDelaySeconds","yOffset","keyFrames","push","frame","Zero","One","setKeys","animations","beginAnimation","GrassBlock","reflectionTexture","coordinatesMode","SKYBOX_MODE","Character","idleAnimation","walkingAnimation","faceDirection","characterParentMaterial","alpha","characterModel","ImportMesh","meshes","particleSystem","skeleton","animationGroups","characterModelMeshes","forEach","scaling","xOffset","zOffset","meshMaterial","ambientColor","setParent","characterFaceDirection","rotation","walk","moveAxis","moveDirection","walkAnimation","ANIMATIONTYPE_FLOAT","walkKeyframes","animationSpeed","length","pop","stop","start","from","to","setTimeout","turnLeft","abs","turnLeftAnimation","turnLeftKeyframes","turnRight","turnRightAnimation","turnRightKeyframes","respawn","respawnPositionAnimation","positionKeyframe","AddBlockButton","onButtonClicked","data-toggle","data-target","blockCountLimit","DeleteBlockButton","confirm","deleteBlock","parentIndex","index","WalkBlock","TurnBlock","onSelectionChange","updateBlock","direction","LoopBlock","componentDidUpdate","updateChildReference","indexes","split","map","i","currentParentRef","functions","children","currentBlockChildren","onCycleCountChange","loopCycles","min","max","data","key","renderBlock","IfBlock","onOperatorChange","operator","onLeftOperandChange","leftOperand","onRightOperandChange","rightOperand","name","ifBlockLeftOperandSelection","option","idx","uiText","ifBlockRightOperandSelection","CodeEngine","startSimulation","simulate","then","runSuccessfuly","characterPosition","level","_ENVIRONMENT","finishLevel","resetLevel","error","parent","a","block","turn","loop","if_","delayAction","hasReachedGoal","canWalk","parentBlock","metadata","getParentRef","functionsArray","parentIndexString","blockType","prevState","newFunctions","JSON","parse","stringify","blockParentRef","forceUpdate","blockIndex","newState","keys","splice","blockMetadata","hasBlockCountLimit","isRunning","CODE_BLOCK_TYPE","WALK","TURN","IF","LOOP","ms","Promise","resolve","targetX","targetZ","targetBlockType","includes","LevelTitle","heading","subheading","LevelInstructions","ObjectivePoint","LevelOne","environmentSpawned","ENVIRONMENT","yData","yIndex","xData","xIndex","zData","zIndex","spawnEnvironmentItem","App","style","color","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95ee057e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as BABYLON from \"babylonjs\";\nimport Globals from './Globals';\n\n// Temp definitions, delete later\nvar scene;\nvar boxMesh;\n\nclass BabylonCanvas extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { useWireFrame: false, shouldAnimate: false };\n        this.hemisphericLight = undefined;\n        this.underMapLighting = undefined;\n        this.arcRotateCamera = undefined;\n    }\n    \n    componentDidMount = () => {        \n        // Initialize scene and engine\n        this.engine = new BABYLON.Engine(this.canvas, true);\n        Globals.scene = new BABYLON.Scene(this.engine);\n        \n        // Intitialize the scene with the required elements\n        this.addLight();\n        this.addCamera();\n        this.addSkybox();\n\n        // this.addModels();\n        // this.addGround();\n\n        // Add Events\n        window.addEventListener(\"resize\", this.onWindowResize, false);\n        window.addEventListener(\"keydown\", this.onKeydownEvent);\n\n        // Render Loop\n        this.engine.runRenderLoop(() => {\n            Globals.scene.render();\n        });\n\n        // Handle animations and per frame calculations\n        // Simillar to Update() function in Unity\n        Globals.scene.registerBeforeRender(() => {\n            \n        });\n    };\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.onWindowResize, false);\n    }\n\n    onWindowResize = event => {\n        this.engine.resize();\n    };\n\n    onKeydownEvent = event => {\n        switch(event.keyCode) {\n            case 219: // [\n                Globals.scene.debugLayer.show();\n                break;\n            case 221: // ]\n                Globals.scene.debugLayer.hide();\n                break;\n            default:\n                break;\n        }\n    } \n\n    addLight = () => {\n        // Create a basic light, aiming 0,1,0 - meaning, to the sky.\n        this.hemisphericLight = new BABYLON.HemisphericLight(\n            \"hemisphericLight\",\n            new BABYLON.Vector3(0, 1, 0),\n            Globals.scene\n        );\n\n        // Create directional light below the map to light up the bottom faces\n        this.underMapLighting = new BABYLON.SpotLight(\n            \"underMapLight\",\n            new BABYLON.Vector3(2, -10, 2),\n            new BABYLON.Vector3(0, 1, 0),\n            Math.PI,\n            8,\n            Globals.scene\n        )\n    };\n\n    addSkybox = () => {\n        var photoSphere = BABYLON.Mesh.CreateSphere(\"skybox\", 16.0, 50.0, scene);\n\n        var skyboxMaterial = new BABYLON.StandardMaterial(\"skyboxMaterial\", scene);\n        skyboxMaterial.emissiveTexture = new BABYLON.Texture(\n            \"assets/other/skybox.png\",\n            Globals.scene,\n            1,\n            0\n        );\n        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\n        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\n        skyboxMaterial.emissiveTexture.uOffset = -Math.PI / 2; // left-right\n        skyboxMaterial.emissiveTexture.uOffset = 0.1; // up-down\n        skyboxMaterial.backFaceCulling = false;\n\n        photoSphere.material = skyboxMaterial;\n    }\n\n    addCamera = () => {\n        // ---------------ArcRotateCamera or Orbit Control----------\n        this.arcRotateCamera = new BABYLON.ArcRotateCamera(\n            \"MainCamera\",\n            Math.PI / 2,\n            Math.PI / 4,\n            10,\n            new BABYLON.Vector3(2, 0, 2),\n            Globals.scene\n        );\n        \n        this.arcRotateCamera.panningSensibility = 0;\n        this.arcRotateCamera.lowerRadiusLimit = this.arcRotateCamera.upperRadiusLimit = 10;\n\n        // camera.inertia = 0;\n        // camera.angularSensibilityX = 250;\n        // camera.angularSensibilityY = 250;\n\n        // This attaches the camera to the canvas\n        this.arcRotateCamera.attachControl(this.canvas, true);\n        this.arcRotateCamera.setPosition(new BABYLON.Vector3(7, 7, 7));\n        this.arcRotateCamera.beta = Math.PI / 2.5;\n    };\n\n    addGround = () => {\n        // Create a built-in \"ground\" shape.\n        var ground = BABYLON.MeshBuilder.CreateGround(\n            \"ground1\",\n            { height: 6, width: 6, subdivisions: 2 },\n            scene\n        );\n        var groundMaterial = new BABYLON.StandardMaterial(\"grass0\", scene);\n        groundMaterial.diffuseTexture = new BABYLON.Texture(\n            \"./assets/ground.jpeg\",\n            scene\n        );\n        ground.material = groundMaterial;\n    };\n\n    addModels = () => {\n        // Add BOX\n        boxMesh = BABYLON.MeshBuilder.CreateBox(\n            \"box\",\n            { height: 1, width: 1, depth: 1 },\n            scene\n        );\n        boxMesh.position.y = 1;\n\n        var woodMaterial = new BABYLON.StandardMaterial(\"wood\", scene);\n        woodMaterial.diffuseTexture = new BABYLON.Texture(\n            \"./assets/portal_cube.png\",\n            scene\n        );\n        boxMesh.material = woodMaterial;\n    };\n\n    render() {\n        return (\n            <canvas\n                className=\"renderCanvas\"\n                ref={canvas => {\n                    this.canvas = canvas;\n                }}\n            />\n        );\n    }\n}\nexport default BabylonCanvas;","class Globals {\n    constructor() {\n        this.scene = undefined;\n        this.engine = undefined;\n        this.framerate = 60;\n        this.character = undefined;\n        this.addBlockModal = undefined;\n        this.currentLevel = undefined;\n        this.codeEngine = undefined;\n    }\n}\n\nexport default new Globals();","import React, { Component } from 'react';\n\nclass Navbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  }\n    }\n    render() { \n        return (\n            <nav className=\"navbar navbar-light bg-light\">\n                <a className=\"navbar-brand\" href=\"/\">REEEE</a>\n            </nav>\n        );\n    }\n}\n \nexport default Navbar;","import React, { Component } from 'react';\nimport Globals from '../../Globals';\n\nclass AddBlockModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedBlockType: null\n        }\n        this.parentBlockIndex = -1;\n\n        Globals.addBlockModal = this;\n    }\n\n    onChangeSelection = (event) => {\n        this.setState({\n            selectedBlockType: event.target.value\n        });\n    }\n\n    onCancelClicked = (event) => {\n        this.setState({\n            selectedBlockType: null\n        });\n    }\n\n    onAddButtonClicked = () => {\n        console.log(`Adding ${this.state.selectedBlockType} block`);\n        Globals.codeEngine.addBlock(this.state.selectedBlockType, this.parentBlockIndex);\n    }\n\n    render() { \n        return (\n            <div id=\"addBlockModal\" className=\"modal fade\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog modal-dialog-centered modal-lg\" role=\"document\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h4 className=\"modal-title\" id=\"myModalLabel\">Add Function</h4>                        </div>\n                        <div className=\"modal-body\">\n                            <form>\n                                <input \n                                    type=\"radio\"\n                                    value=\"WALK\"\n                                    checked={this.state.selectedBlockType === \"WALK\"}\n                                    onChange={this.onChangeSelection}\n                                />\n                                <label>Walk</label>\n                                <input \n                                    type=\"radio\"\n                                    value=\"TURN\"\n                                    checked={this.state.selectedBlockType === \"TURN\"}\n                                    onChange={this.onChangeSelection}\n                                />\n                                <label>Turn</label>\n                                <input\n                                    type=\"radio\"\n                                    value=\"LOOP\"\n                                    checked={this.state.selectedBlockType === \"LOOP\"}\n                                    onChange={this.onChangeSelection}\n                                />\n                                <label>Loop</label>\n                                <input \n                                    type=\"radio\"\n                                    value=\"IF\"\n                                    checked={this.state.selectedBlockType === \"IF\"}\n                                    onChange={this.onChangeSelection}\n                                />\n                                <label>If</label>\n                            </form>\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button\n                                type=\"button\" className=\"btn btn-success\" \n                                data-dismiss=\"modal\"\n                                disabled={this.state.selectedBlockType === null}\n                                onClick={this.onAddButtonClicked}\n                            >\n                                Add\n                            </button>\n                            <button \n                                type=\"button\" className=\"btn btn-light\" data-dismiss=\"modal\" \n                                onClick={this.onCancelClicked}\n                            >\n                                Cancel\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default AddBlockModal\n","/*\n    _ENVIRONMENT.js\n    Environment game objects id definition. Used for map spawning and referencing\n*/\n\nclass ENVIRONMENT {\n    NONE = 0;\n    STONE = 1;\n    GRASS = 2;\n    PATH = 3;\n    OBJECTIVE = 99;\n    \n    WALKABLE_BLOCKS = [this.PATH, this.GRASS];\n}\n\n// Freeze the object to prevent changes\nexport default Object.freeze(new ENVIRONMENT());","import React, { Component } from 'react';\nimport * as BABYLON from 'babylonjs';\nimport Globals from '../../Globals';\n\nclass StoneBlock extends Component {\n    constructor(props) {\n        super(props);\n        this.mesh = undefined;\n    }\n    \n    componentDidMount = () => {\n        this.createMesh();\n        this.applyMaterial();\n        this.startSpawnAnimation();\n    }\n\n    componentWillUnmount = () => {\n        this.mesh.dispose();\n    }\n\n    createMesh = () => {\n        // Read values from component props. Load default value if not defined.\n        const posX = this.props.posX ? this.props.posX : 0;\n        const posY = this.props.posY ? this.props.posY : 0;\n        const posZ = this.props.posZ ? this.props.posZ : 0;\n\n        // Create mesh\n        this.mesh = BABYLON.MeshBuilder.CreateBox(\n            `stoneBlock_${posX},${posY},${posZ}`,\n            { height: 1, width: 1, depth: 1 },\n            Globals.scene\n        );\n\n        // Modify mesh properties\n        this.mesh.position.x = posX;\n        this.mesh.position.y = posY;\n        this.mesh.position.z = posZ;\n    }\n\n    applyMaterial = () => {\n        let material = new BABYLON.StandardMaterial(\"StoneBlockMaterial\", Globals.scene);\n        \n        // \n        material.diffuseTexture = new BABYLON.Texture(\"assets/textures/stone.png\", Globals.scene);\n        material.diffuseTexture.updateSamplingMode(BABYLON.Texture.NEAREST_NEAREST_MIPLINEAR);\n\n        // Use CubeTexture to map the texture to each face\n        // material.reflectionTexture = new BABYLON.CubeTexture(\"/assets/textures/grass/grass\", Globals.scene);\n        // material.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\n        // material.reflectionTexture.updateSamplingMode(BABYLON.Texture.NEAREST_NEAREST_MIPLINEAR);\n        // material.diffuseColor = new BABYLON.Color3(0, 0, 0);\n        material.specularColor = new BABYLON.Color3(0, 0, 0);\n        material.backFaceCulling = false;\n\n        // Apply material to mesh\n        this.mesh.material = material;\n    }\n\n    startSpawnAnimation = () => {\n        const spawnAnimation = new BABYLON.Animation(\n            \"spawnAnimation\", \n            \"scaling\", \n            Globals.framerate, \n            BABYLON.Animation.ANIMATIONTYPE_VECTOR3,\n            BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n        );\n        \n        const yOffset = this.props.yOffset ? this.props.yOffset : 0;\n        const posY = this.props.posY ? this.props.posY : 0;\n        const animationDelaySeconds = (yOffset + posY) * 0.2 + 1;\n        \n        const keyFrames = [];\n        keyFrames.push({\n            frame: 0,\n            value: BABYLON.Vector3.Zero(),\n        });\n        keyFrames.push({\n            frame: animationDelaySeconds * Globals.framerate,\n            value: BABYLON.Vector3.Zero()\n        });\n        keyFrames.push({\n            frame: (animationDelaySeconds * Globals.framerate) + (0.3 * Globals.framerate),\n            value: BABYLON.Vector3.One(),\n        });\n        spawnAnimation.setKeys(keyFrames);\n\n        this.mesh.animations.push(spawnAnimation);\n        \n        Globals.scene.beginAnimation(this.mesh, 0, (animationDelaySeconds * Globals.framerate) + (0.3 * Globals.framerate), false);\n    }\n\n\n    render = () => {\n        return (\n            <div></div>\n        )\n    }\n}\n\nexport default StoneBlock\n","import React, { Component } from 'react';\nimport * as BABYLON from 'babylonjs';\nimport Globals from '../../Globals';\n\nclass GrassBlock extends Component {\n    constructor(props) {\n        super(props);\n        this.mesh = undefined;\n    }\n    \n    componentDidMount = () => {\n        this.createMesh();\n        this.applyMaterial();\n        this.startSpawnAnimation();\n    }\n\n    componentWillUnmount = () => {\n        this.mesh.dispose();\n    }\n\n    createMesh = () => {\n        // Read values from component props. Load default value if not defined.\n        const posX = this.props.posX ? this.props.posX : 0;\n        const posY = this.props.posY ? this.props.posY : 0;\n        const posZ = this.props.posZ ? this.props.posZ : 0;\n\n        // Create mesh\n        this.mesh = BABYLON.MeshBuilder.CreateBox(\n            `grassBlock_${posX},${posY},${posZ}`,\n            { height: 1, width: 1, depth: 1 },\n            Globals.scene\n        );\n\n        // Modify mesh properties\n        this.mesh.position.x = posX;\n        this.mesh.position.y = posY;\n        this.mesh.position.z = posZ;\n    }\n\n    applyMaterial = () => {\n        let material = new BABYLON.StandardMaterial(\"GrassBlockMaterial\", Globals.scene);\n        \n        // Use CubeTexture to map the texture to each face\n        material.reflectionTexture = new BABYLON.CubeTexture(\"assets/textures/grass/grass\", Globals.scene);\n        material.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\n        material.reflectionTexture.updateSamplingMode(BABYLON.Texture.NEAREST_NEAREST_MIPLINEAR);\n        material.diffuseColor = new BABYLON.Color3(0, 0, 0);\n        material.specularColor = new BABYLON.Color3(0, 0, 0);\n        material.backFaceCulling = false;\n\n        // Apply material to mesh\n        this.mesh.material = material;\n    }\n\n    startSpawnAnimation = () => {\n        const spawnAnimation = new BABYLON.Animation(\n            \"spawnAnimation\", \n            \"scaling\", \n            Globals.framerate, \n            BABYLON.Animation.ANIMATIONTYPE_VECTOR3,\n            BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n        );\n        \n        const yOffset = this.props.yOffset ? this.props.yOffset : 0;\n        const posY = this.props.posY ? this.props.posY : 0;\n        const animationDelaySeconds = (yOffset + posY) * 0.2 + 1;\n        \n        const keyFrames = [];\n        keyFrames.push({\n            frame: 0,\n            value: BABYLON.Vector3.Zero(),\n        });\n        keyFrames.push({\n            frame: animationDelaySeconds * Globals.framerate,\n            value: BABYLON.Vector3.Zero()\n        });\n        keyFrames.push({\n            frame: (animationDelaySeconds * Globals.framerate) + (0.3 * Globals.framerate),\n            value: BABYLON.Vector3.One(),\n        });\n        spawnAnimation.setKeys(keyFrames);\n\n        this.mesh.animations.push(spawnAnimation);\n        \n        Globals.scene.beginAnimation(this.mesh, 0, (animationDelaySeconds * Globals.framerate) + (0.3 * Globals.framerate), false);\n    }\n\n    render = () => {\n        return (\n            <div></div>\n        )\n    }\n}\n\nexport default GrassBlock\n","import React, { Component } from 'react';\nimport * as BABYLON from 'babylonjs';\nimport Globals from '../../Globals';\n\nclass Character extends Component {\n    constructor(props) {\n        super(props);\n\n        // Character\n        this.mesh = undefined;\n        this.characterModel = undefined;\n        this.characterModelMeshes = undefined;\n        this.characterFaceDirection = props.faceDirection;    // Value represents N E S W\n        \n        // Object position offset\n        this.xOffset = 0;\n        this.yOffset = -0.5;\n        this.zOffset = 0;\n\n        // Animations\n        this.animationSpeed = 0.5;\n        this.turnLeftAnimation = undefined;\n        this.idleAnimation = undefined;\n        this.walkingAnimation = undefined;\n\n        // Put a global reference to this object\n        Globals.character = this;\n    }\n    \n    componentDidMount = () => {\n        this.createMesh();\n    }\n    \n    componentWillUnmount = () => {\n        Globals.character = undefined;\n        this.mesh.dispose();\n        this.idleAnimation = this.walkingAnimation = null;\n    }\n    \n    createMesh = () => {\n        // Read values from component props. Load default value if not defined.\n        const posX = this.props.posX ? this.props.posX : 0;\n        const posY = this.props.posY ? this.props.posY : 0;\n        const posZ = this.props.posZ ? this.props.posZ : 0;\n        const faceDirection = this.props.faceDirection ? this.props.faceDirection : 0;\n        \n        // Create parent mesh\n        this.mesh = BABYLON.MeshBuilder.CreateBox(\n            \"character\",\n            { height: 1, width: 1, depth: 1 },\n            Globals.scene\n        );\n\n        // Create parent material for transparency\n        const characterParentMaterial = new BABYLON.Material(\"characterParentMaterial\");\n        characterParentMaterial.alpha = 0;\n            \n        // Modify parent object properties\n        this.mesh.position = new BABYLON.Vector3(posX, posY, posZ);\n        this.mesh.material = characterParentMaterial;\n        \n\n        // Load mesh\n        this.characterModel = BABYLON.SceneLoader.ImportMesh(\n            \"\",\n            \"assets/obj/\",\n            \"character_running.glb\",\n            Globals.scene,\n            (meshes, particleSystem, skeleton, animationGroups) => {               \n                // Expose the meshes and animations to the outside world\n                this.characterModelMeshes = meshes;\n                this.idleAnimation = animationGroups[0];\n                this.walkingAnimation = animationGroups[1];\n                \n                \n                // Modify mesh properties\n                meshes.forEach(mesh => {\n                    mesh.scaling = new BABYLON.Vector3(0.1, 0.1, 0.1);\n                    mesh.position = new BABYLON.Vector3(\n                        posX + this.xOffset,\n                        posY + this.yOffset,\n                        posZ + this.zOffset\n                    );\n                    const meshMaterial = new BABYLON.StandardMaterial(\"characterMaterial\");\n                    meshMaterial.specularColor = new BABYLON.Color3(1 ,1 ,1);\n                    meshMaterial.diffuseColor = new BABYLON.Color3(1, 0.6, 0);\n                    meshMaterial.backFaceCulling = false;\n                    meshMaterial.ambientColor = new BABYLON.Color3(0.23, 0.98, 0.53);\n\n                    mesh.material = meshMaterial;\n                    mesh.setParent(this.mesh);\n                });\n\n                // Use rotation data from component properties\n                this.characterFaceDirection = faceDirection;\n                this.mesh.rotation.y += Math.PI * 0.5 * faceDirection;\n\n                // Start spawn animation after loading mesh\n                this.startSpawnAnimation();\n            }\n        );\n    }\n\n    startSpawnAnimation = () => {\n        const yOffset = this.props.yOffset ? this.props.yOffset : 0;\n        const posY = this.props.posY ? this.props.posY : 0;\n        const animationDelaySeconds = (yOffset + posY) * 0.2 + 1;\n        \n        const spawnAnimation = new BABYLON.Animation(\n            \"spawnAnimation\", \n            \"position\", \n            Globals.framerate, \n            BABYLON.Animation.ANIMATIONTYPE_VECTOR3,\n            BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n        );\n        \n        const keyFrames = [];\n        keyFrames.push({\n            frame: 0,\n            value: new BABYLON.Vector3(\n                this.props.posX,\n                100,\n                this.props.posZ\n            ),\n        });\n        keyFrames.push({\n            frame: (animationDelaySeconds * Globals.framerate) + (0.1 * Globals.framerate) - 1,\n            value: new BABYLON.Vector3(\n                this.props.posX,\n                100,\n                this.props.posZ\n            ),\n        });\n        keyFrames.push({\n            frame: (animationDelaySeconds * Globals.framerate) + (0.1 * Globals.framerate),\n            value: new BABYLON.Vector3(\n                this.props.posX,\n                this.props.posY + 0.5,\n                this.props.posZ\n            ),\n        });\n        keyFrames.push({\n            frame: (animationDelaySeconds * Globals.framerate) + (0.3 * Globals.framerate),\n            value: new BABYLON.Vector3(\n                this.props.posX,\n                this.props.posY,\n                this.props.posZ\n            ),\n        });\n        spawnAnimation.setKeys(keyFrames);\n\n        this.mesh.animations.push(spawnAnimation);\n        \n        Globals.scene.beginAnimation(this.mesh, 0, (animationDelaySeconds * Globals.framerate) + (0.3 * Globals.framerate), false);\n    }\n\n    walk = () => {\n        // Determine the move axis and move direction\n        const moveAxis = this.characterFaceDirection % 2 === 0 ? \"z\" : \"x\";\n        const moveDirection = this.characterFaceDirection >=2 ? 1 : -1;\n\n        const walkAnimation = new BABYLON.Animation(\n            \"characterTurnleft\",\n            `position.${moveAxis}`,\n            Globals.framerate,\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT,\n            BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n        );\n\n        const walkKeyframes = [];\n        walkKeyframes.push({\n            frame: 0,\n            value: moveAxis === \"x\" ? this.mesh.position.x : this.mesh.position.z\n        });\n        walkKeyframes.push({\n            frame: this.animationSpeed * Globals.framerate,\n            value: (moveAxis === \"x\" ? this.mesh.position.x : this.mesh.position.z) + moveDirection\n        });\n\n        walkAnimation.setKeys(walkKeyframes);\n\n        // Pop the last animation before adding another one\n        if (this.mesh.animations.length > 0)\n            this.mesh.animations.pop();\n        this.mesh.animations.push(walkAnimation);\n\n        Globals.scene.beginAnimation(this.mesh, 0, this.animationSpeed * Globals.framerate, false);\n        this.idleAnimation.stop();\n        this.walkingAnimation.start(false, 2.0, this.walkingAnimation.from, this.walkingAnimation.to, false);\n        \n        // Stop animation after finished walking\n        setTimeout(() => {\n            this.walkingAnimation.stop();\n            this.idleAnimation.start(true, 1.0, this.idleAnimation.from, this.idleAnimation.to, false);\n        }, this.animationSpeed * 1000);\n    }\n\n    turnLeft = () => {\n        // Update the direction of the character\n        if (this.characterFaceDirection === 0)\n            this.characterFaceDirection = 3;\n        else\n            this.characterFaceDirection = Math.abs((this.characterFaceDirection - 1) % 4);\n        console.log(`Rotating player to ${this.characterFaceDirection}`);\n\n        const turnLeftAnimation = new BABYLON.Animation(\n            \"characterTurnleft\",\n            \"rotation.y\",\n            Globals.framerate,\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT,\n            BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n        );\n\n        const turnLeftKeyframes = [];\n        turnLeftKeyframes.push({\n            frame: 0,\n            value: this.mesh.rotation.y\n        });\n        turnLeftKeyframes.push({\n            frame: this.animationSpeed * Globals.framerate,\n            value: this.mesh.rotation.y - Math.PI/2\n        });\n\n        turnLeftAnimation.setKeys(turnLeftKeyframes);\n        \n        // Pop the last animation before adding another one\n        if (this.mesh.animations.length > 0)\n            this.mesh.animations.pop();\n        this.mesh.animations.push(turnLeftAnimation);\n\n        Globals.scene.beginAnimation(this.mesh, 0, this.animationSpeed * Globals.framerate, false);\n    }\n\n    turnRight = () => {\n        // Update the direction of the character\n        this.characterFaceDirection = Math.abs((this.characterFaceDirection + 1) % 4);\n        console.log(`Rotating player to ${this.characterFaceDirection}`);\n\n        const turnRightAnimation = new BABYLON.Animation(\n            \"characterTurnleft\",\n            \"rotation.y\",\n            Globals.framerate,\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT,\n            BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n        );\n\n        const turnRightKeyframes = [];\n        turnRightKeyframes.push({\n            frame: 0,\n            value: this.mesh.rotation.y\n        });\n        turnRightKeyframes.push({\n            frame: this.animationSpeed * Globals.framerate,\n            value: this.mesh.rotation.y + Math.PI/2\n        });\n\n        turnRightAnimation.setKeys(turnRightKeyframes);\n        \n        // Pop the last animation before adding another one\n        if (this.mesh.animations.length > 0)\n            this.mesh.animations.pop();\n        this.mesh.animations.push(turnRightAnimation);\n\n        Globals.scene.beginAnimation(this.mesh, 0, this.animationSpeed * Globals.framerate, false);\n    }\n\n    respawn = () => {\n        const respawnPositionAnimation = new BABYLON.Animation(\n            \"characterRespawnPosition\",\n            \"position\",\n            Globals.framerate,\n            BABYLON.Animation.ANIMATIONTYPE_VECTOR3,\n            BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n        );        \n        const positionKeyframe = [];\n        positionKeyframe.push({\n            frame: 0,\n            value: this.mesh.position\n        });\n        positionKeyframe.push({\n            frame: 0.2 * Globals.framerate,\n            value: new BABYLON.Vector3(\n                this.mesh.position.x,\n                1.5,\n                this.mesh.position.z\n            )\n        });\n        positionKeyframe.push({\n            frame: 0.2 * Globals.framerate + 1,\n            value: new BABYLON.Vector3(\n                this.mesh.position.x,\n                1.5,\n                this.mesh.position.z\n            )\n        });\n        positionKeyframe.push({\n            frame: 0.4 * Globals.framerate,\n            value: new BABYLON.Vector3(\n                this.props.posX,\n                1.5,\n                this.props.posZ\n            )\n        });\n        positionKeyframe.push({\n            frame: 0.7 * Globals.framerate,\n            value: new BABYLON.Vector3(\n                this.props.posX,\n                this.props.posY,\n                this.props.posZ\n            )\n        });\n        respawnPositionAnimation.setKeys(positionKeyframe);\n        \n        // Pop the last animation before adding another one\n        if (this.mesh.animations.length > 0)\n            this.mesh.animations.pop();\n        this.mesh.animations.push(respawnPositionAnimation);\n\n        // Move character to spawn point\n        Globals.scene.beginAnimation(this.mesh, 0, 0.8 * Globals.framerate, false);\n        \n        // Rotate player to its original state\n        this.mesh.rotation.y = Math.PI * 0.5 * this.props.faceDirection;\n        this.characterFaceDirection = this.props.faceDirection;\n    }\n    \n    render = () => {\n        return (\n            <div>\n                <button onClick={this.walk}>Move Forward</button>\n                <button onClick={this.turnLeft}>Turn Left</button>\n                <button onClick={this.turnRight}>Turn Right</button>\n            </div>\n        )\n    }\n}\n\nexport default Character\n","import React, { Component } from 'react';\nimport Globals from '../../Globals';\n\nclass AddBlockButton extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            blockCountLimit: null\n        }\n    }\n\n    onButtonClicked = () => {\n        // Set the modal's parent index reference\n        Globals.addBlockModal.parentBlockIndex = this.props.parentBlockIndex;\n    }\n\n    render = () => {\n        return (\n            <button \n                className=\"btnAddBlock\" \n                data-toggle=\"modal\"\n                data-target=\"#addBlockModal\"\n                onClick={this.onButtonClicked}\n            >\n                +\n            </button>\n        )\n    }\n}\n\nexport default AddBlockButton\n","import React, { Component } from 'react';\nimport Globals from '../../Globals';\n\nclass DeleteBlockButton extends Component {\n    onButtonClicked = () => {\n        const deleteConfirmed = window.confirm(\"Are you sure you want to delete this function?\");\n        if (deleteConfirmed) Globals.codeEngine.deleteBlock(this.props.parentIndex, this.props.index);\n    }\n\n    render = () => {\n        return (\n            <button \n                className=\"btnDeleteBlock\"\n                onClick={this.onButtonClicked}\n            >\n                -\n            </button>\n        )\n    }\n}\n\nexport default DeleteBlockButton\n","import React, { Component } from 'react';\nimport DeleteBlockButton from '../uiElements/DeleteBlockButton';\n\nclass WalkBlock extends Component {\n    render = () => {\n        return (\n            <div className=\"block function\" index={this.props.index}>\n                <DeleteBlockButton index={this.props.index} parentIndex={this.props.parentIndex}/>\n                <p>Walk</p>\n            </div>\n        )\n    }\n}\n\nexport default WalkBlock\n","import React, { Component } from 'react';\nimport Globals from '../../Globals';\nimport DeleteBlockButton from '../uiElements/DeleteBlockButton';\n\nclass TurnBlock extends Component {\n    onSelectionChange = (event) => {\n        const { value } = event.target;\n        Globals.codeEngine.updateBlock(\n            this.props.parentIndex,\n            this.props.index,\n            { direction: value }\n        );\n    }\n\n    render = () => {\n        return (\n            <div className=\"block function\" index={this.props.index}>\n                <DeleteBlockButton index={this.props.index} parentIndex={this.props.parentIndex}/>\n                <p>Turn</p>\n                <select className=\"form-control\" value={this.props.direction} onChange={this.onSelectionChange}>\n                    <option value=\"-1\">Left</option>\n                    <option value=\"1\">Right</option>\n                </select>\n            </div>\n        )\n    }\n}\n\nexport default TurnBlock\n","import React, { Component } from 'react';\nimport Globals from '../../Globals';\nimport AddBlockButton from './AddBlockButton';\nimport DeleteBlockButton from './DeleteBlockButton';\n\nclass LoopBlock extends Component {\n    constructor(props) {\n        super(props);\n        this.updateChildReference();\n    }\n    \n    componentDidUpdate = () => {\n        this.updateChildReference();\n    }\n    \n    updateChildReference = () => {\n        // Retrieve functions array reference from index props\n        const indexes = this.props.parentIndex.split(\" \").map(i => +i);\n        let currentParentRef = undefined;\n        for (let i = 0; i < indexes.length; i++) {\n            if (indexes[i] === -1) {\n                currentParentRef = Globals.codeEngine.state.functions;\n            } else {\n                if (!currentParentRef[indexes[i]]) return;\n                currentParentRef = currentParentRef[indexes[i]].children;\n            }\n        }\n\n        if (!currentParentRef[this.props.index]) return;\n        this.currentBlockChildren = currentParentRef[this.props.index].children;\n    }\n\n    onCycleCountChange = (event) => {\n        const { value } = event.target;\n\n        // Update value on CodeEngine\n        Globals.codeEngine.updateBlock(\n            this.props.parentIndex,\n            this.props.index,\n            { loopCycles: value }\n        );        \n    }\n\n    render = () => {\n        return (\n            <div className=\"block loop\" index={this.props.index}>\n                <DeleteBlockButton index={this.props.index} parentIndex={this.props.parentIndex}/>\n                <p>Loop</p>\n                    <input \n                        type=\"number\"\n                        className=\"form-control\"\n                        min=\"2\"\n                        max=\"99\"\n                        onChange={this.onCycleCountChange}\n                        value={this.props.loopCycles}\n                    />\n                <p>times</p>\n                <div className=\"children\">\n                    {\n                        this.currentBlockChildren.map((data, key) => {\n                            return Globals.codeEngine.renderBlock(data, key, `${this.props.parentIndex} ${this.props.index}`);\n                        })\n                    }\n                </div>\n                <AddBlockButton parentBlockIndex={`${this.props.parentIndex} ${this.props.index}`}/>\n            </div>\n        )\n    }\n}\n\nexport default LoopBlock\n","import React, { Component } from 'react';\nimport Globals from '../../Globals';\nimport AddBlockButton from './AddBlockButton';\nimport DeleteBlockButton from './DeleteBlockButton';\n\nclass IfBlock extends Component {\n    constructor(props) {\n        super(props);\n        this.updateChildReference();\n    }\n    \n    componentDidUpdate = () => {\n        this.updateChildReference();\n    }\n    \n    updateChildReference = () => {\n        // Retrieve functions array reference from index props\n        const indexes = this.props.parentIndex.split(\" \").map(i => +i);\n        let currentParentRef = undefined;\n        for (let i = 0; i < indexes.length; i++) {\n            if (indexes[i] === -1) {\n                currentParentRef = Globals.codeEngine.state.functions;\n            } else {\n                if (!currentParentRef[indexes[i]]) return;\n                currentParentRef = currentParentRef[indexes[i]].children;\n            }\n        }\n\n        if (!currentParentRef[this.props.index]) return;\n        this.currentBlockChildren = currentParentRef[this.props.index].children;\n    }\n\n    onOperatorChange = (event) => {\n        const { value } = event.target;\n\n        // Update value on CodeEngine\n        Globals.codeEngine.updateBlock(\n            this.props.parentIndex,\n            this.props.index,\n            { operator: value }\n        );        \n    }\n\n    onLeftOperandChange = (event) => {\n        const { value } = event.target;\n\n        // Update value on CodeEngine\n        Globals.codeEngine.updateBlock(\n            this.props.parentIndex,\n            this.props.index,\n            { leftOperand: value }\n        );        \n    }\n\n    onRightOperandChange = (event) => {\n        const { value } = event.target;\n\n        // Update value on CodeEngine\n        Globals.codeEngine.updateBlock(\n            this.props.parentIndex,\n            this.props.index,\n            { rightOperand: value }\n        );        \n    }\n\n    render = () => {\n        return (\n            <div className=\"block if\" index={this.props.index}>\n                <DeleteBlockButton index={this.props.index} parentIndex={this.props.parentIndex}/>\n                <p>If</p>\n                <div className=\"options\">\n                    <select className=\"form-control operand\" name=\"leftOperand\" value={this.props.leftOperand} onChange={this.onLeftOperandChange}>\n                        {\n                            Globals.codeEngine.ifBlockLeftOperandSelection.map((option, idx) => {\n                                return (\n                                    <option value={option.id} key={idx}>{option.uiText}</option>\n                                );\n                            })\n                        }\n                    </select>\n                    <select className=\"form-control operator\" name=\"operator\" value={this.props.operator} onChange={this.onOperatorChange}>\n                        <option value=\"EQUALS\">=</option>\n                        <option value=\"NOT_EQUALS\">!=</option>\n                    </select>\n                    <select className=\"form-control operand\" name=\"rightOperand\" value={this.props.rightOperand} onChange={this.onRightOperandChange}>\n                        {\n                            Globals.codeEngine.ifBlockRightOperandSelection.map((option, idx) => {\n                                return (\n                                    <option value={option.id} key={idx}>{option.uiText}</option>\n                                );\n                            })\n                        }\n                    </select>\n                </div>\n                <div className=\"children\">\n                    {\n                        this.currentBlockChildren.map((data, key) => {\n                            return Globals.codeEngine.renderBlock(data, key, `${this.props.parentIndex} ${this.props.index}`);\n                        })\n                    }\n                </div>\n                <AddBlockButton parentBlockIndex={`${this.props.parentIndex} ${this.props.index}`}/>\n            </div>\n        )\n    }\n}\n\nexport default IfBlock;\n","import React, { Component } from 'react'\nimport Globals from '../../Globals';\nimport _ENVIRONMENT from '../gameObjects/_ENVIRONMENT';\n\n// CodeEngine DOM Elements\nimport AddBlockButton from '../uiElements/AddBlockButton';\nimport WalkBlock from '../uiElements/WalkBlock';\nimport TurnBlock from '../uiElements/TurnBlock';\nimport LoopBlock from '../uiElements/LoopBlock';\nimport IfBlock from '../uiElements/IfBlock';\n\nclass CodeEngine extends Component {\n    constructor(props) {\n        super(props);\n        // const { allowedFunctions, level } = props;\n        this.state = {\n            functions: [],\n            hasBlockCountLimit: false,\n            blockCountLimit: -1,\n            isRunning: false\n        }\n\n        // Block types enum\n        this.CODE_BLOCK_TYPE = Object.freeze({\n            WALK: 0,\n            TURN: 1,\n            IF: 2,\n            LOOP: 3\n        });\n\n        // If block value definition\n        this.ifBlockLeftOperandSelection = [\n            { id: \"CHARACTER\", uiText: \"character\" }\n        ];\n        this.ifBlockRightOperandSelection = [\n            { id: \"CAN_WALK\", uiText: \"canWalk\" }\n        ];\n\n        // Reference current CodeEngine instance to globals\n        Globals.codeEngine = this;\n    }\n\n    componentDidMount = () => {\n\n    }\n\n    startSimulation = (functions) => {\n        this.simulate(this.state.functions).then((runSuccessfuly) => {\n            if (!runSuccessfuly) {\n                this.resetLevel();\n            } else {\n                const characterPosition = Globals.character.mesh.position;\n                const characterIsOnObjective = Globals.currentLevel.level[characterPosition.y + this.props.yOffset][characterPosition.x][characterPosition.z] === _ENVIRONMENT.OBJECTIVE;\n                if (characterIsOnObjective) this.finishLevel();\n                else this.resetLevel()\n            }\n        });\n    }\n    \n    finishLevel = () => {\n        console.log(\"Simulation ran successfuly.\");\n        // Transition to the next scene\n    }\n\n    resetLevel = () => {\n        // Reset to its original state\n        console.error(\"Simulation failed\");\n        Globals.character.respawn();\n    }\n\n    simulate = async (parent) => {\n        // Run actions based on the user input\n        for (let block of parent) {\n            switch(block.type) {\n                case \"WALK\":\n                    if (!await this.walk()) return false;\n                    break;\n                case \"TURN\":\n                    if (!await this.turn(block.direction)) return false;\n                    break;\n                case \"LOOP\":\n                    if (!await this.loop(block)) return false;\n                    break;\n                case \"IF\":\n                    if (!await this.if_(block)) return false;\n                    break;\n                default:\n                    console.error(`Invalid block type. Received ${block.type}`);\n                    return false;\n            }\n\n            // Do not add any execution delay if the current block is loop\n            if (block.type !== \"LOOP\") await this.delayAction(1000);\n            \n            // Check if the player has reached the final position\n        }\n\n        // Check if the player has reached the final position\n        return true;\n    }\n\n    delayAction(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    hasReachedGoal = () => {\n        // Check if the player has reached the final position\n    }\n\n    canWalk() {\n        // Validate if the player can move forward\n        let targetX = Globals.character.mesh.position.x;\n        let targetZ = Globals.character.mesh.position.z;\n\n        switch(Globals.character.characterFaceDirection) {\n            case 0: // Z-\n                targetZ -= 1;\n                break;\n            case 1:  // X-\n                targetX -= 1;\n                break;\n            case 2: // Z+\n                targetZ += 1;\n                break;\n            case 3: // X+\n                targetX += 1;\n                break;\n            default:\n                break;\n        }\n\n        if (targetX < 0 || targetX > 4) return false;\n        if (targetZ < 0 || targetZ > 4) return false;\n        const targetBlockType = Globals.currentLevel.level[Globals.currentLevel.yOffset][targetX][targetZ];\n        if (!_ENVIRONMENT.WALKABLE_BLOCKS.includes(targetBlockType)) return false;\n\n        return true;\n    }\n\n    walk = async () => {\n        // Before walking, check if the character can move into its direction\n        if (!this.canWalk()) return false;\n\n        // Send the command to move forward.\n        // Return true tells the recursive funciton to contunue running.\n        Globals.character.walk();\n        return true;\n    }\n\n    turn = async (direction) => {\n        switch(direction) {\n            case \"1\": // Turn right\n                Globals.character.turnRight();\n                break;\n            case \"-1\": // Turn left\n                Globals.character.turnLeft();\n                break;\n            default:\n                console.error(`Invalid turn direction. Received ${direction}`);\n                break;\n        }\n        return true;\n    }\n\n    loop = async (parentBlock) => {\n        for(let i = 0; i < parentBlock.loopCycles; i++) {\n            if (!await this.simulate(parentBlock.children)) return false;\n        }\n        return true;\n    }\n\n    if_ = async (metadata) => {\n        let operator = metadata.operator === \"EQUALS\";\n        switch(metadata.leftOperand) {\n            case \"CHARACTER\":\n                switch(metadata.rightOperand) {\n                    case \"CAN_WALK\":\n                        if (this.canWalk() === operator) {\n                            if(!await this.simulate(metadata.children)) return false;\n                        }\n                        break;\n                    default:\n                        console.error(\"Invalid if right operand. Received\", metadata.rightOperand);\n                }    \n                break;\n            default:\n                console.error(\"Invalid if left operand. Received\", metadata.leftOperand);\n                return false;\n        }\n\n        return true;\n    }\n\n    getParentRef = (functionsArray, parentIndexString) => {\n        const indexes = parentIndexString.split(\" \").map(i => +i);\n        let currentParentRef = undefined;\n        for (let i = 0; i < indexes.length; i++) {\n            if (indexes[i] === -1) {\n                currentParentRef = functionsArray;\n            } else {\n                currentParentRef = currentParentRef[indexes[i]].children;\n            }\n        }\n        return currentParentRef;\n    }\n\n    addBlock = (blockType, parentIndex) => {\n        this.setState(\n            prevState => {\n                // Duplicate the state to another variable\n                // Stringify and reparse JSON to do deep copy of nested objects\n                let newFunctions = JSON.parse(\n                    JSON.stringify(prevState.functions)\n                );\n\n                // Get the reference to the parent block\n                // Determines where the new objecrt is placed\n                let blockParentRef = this.getParentRef(newFunctions, parentIndex);\n\n                // Add the new block to the parent block\n                switch(blockType) {\n                    case \"WALK\":\n                        blockParentRef.push({\n                            type: \"WALK\"\n                        });\n                        break;\n                    case \"TURN\":\n                        blockParentRef.push({\n                            type: \"TURN\",\n                            direction: \"1\"    // 1: left, -1: right\n                        });\n                        break;\n                    case \"LOOP\":\n                        blockParentRef.push({\n                            type: \"LOOP\",\n                            loopCycles: 2,\n                            children: []\n                        });\n                        break;\n                    case \"IF\":\n                        blockParentRef.push({\n                            type: \"IF\",\n                            operator: \"EQUALS\",\n                            leftOperand: \"CHARACTER\",\n                            rightOperand: \"CAN_WALK\",\n                            children: []\n                        });\n                        break;\n                    default:\n                        console.error(`Unknown code block type: ${blockType}`);\n                        break; \n                }\n\n                // Return the new functions array\n                return {\n                    functions: newFunctions\n                }\n            },\n            () => {\n                this.forceUpdate();\n            }\n        )\n    }\n\n    updateBlock = (parentIndex, blockIndex, newState) => {\n        this.setState(\n            prevState => {\n                // Duplicate the state to another variable\n                // Stringify and reparse JSON to do deep copy of nested objects\n                let newFunctions = JSON.parse(\n                    JSON.stringify(prevState.functions)\n                );\n\n                let blockParentRef = this.getParentRef(newFunctions, parentIndex);\n                \n                // Update block with the passed key value pair(s)\n                Object.keys(newState).forEach((key) => {\n                    blockParentRef[blockIndex][key] = newState[key];\n                });\n                \n                // Return the new functions array\n                return {\n                    functions: newFunctions\n                }\n            },\n            () => {\n                this.forceUpdate();\n            }\n        )\n    }\n\n    deleteBlock = (parentIndex, blockIndex) => {\n        this.setState(\n            prevState => {\n                // Duplicate the state to another variable\n                // Stringify and reparse JSON to do deep copy of nested objects\n                let newFunctions = JSON.parse(\n                    JSON.stringify(prevState.functions)\n                );\n\n                let blockParentRef = this.getParentRef(newFunctions, parentIndex);\n                \n                blockParentRef.splice(blockIndex, 1);\n\n                // Return the new functions array\n                return {\n                    functions: newFunctions\n                }\n            },\n            () => {\n                this.forceUpdate();\n            }\n        )\n    }\n\n    renderBlock = (blockMetadata, key, parentIndex) => {\n        switch(blockMetadata.type) {\n            case \"WALK\":\n                return (\n                    <WalkBlock key={key} index={key} parentIndex={parentIndex}/>\n                );\n            case \"TURN\":\n                return (\n                    <TurnBlock \n                        key={key} \n                        index={key} \n                        parentIndex={parentIndex}\n                        direction={blockMetadata.direction}\n                    />\n                );\n            case \"LOOP\":\n                return (\n                    <LoopBlock \n                        key={key}\n                        index={key}\n                        parentIndex={parentIndex}\n                        loopCycles={blockMetadata.loopCycles}\n                    />\n                );\n            case \"IF\":\n                return (\n                    <IfBlock\n                        key={key}\n                        index={key}\n                        parentIndex={parentIndex}\n                        operator={blockMetadata.operator}\n                        leftOperand={blockMetadata.leftOperand}\n                        rightOperand={blockMetadata.rightOperand}\n                    />\n                );\n            default:\n                return <div>Invalid data. Received {JSON.stringify(blockMetadata)}</div>;\n        }\n    }\n\n    render = () => {\n        return (\n            <div className=\"codeEngine\">\n                {\n                    this.state.functions.map((data, key) => {\n                        return this.renderBlock(data, key, \"-1\");\n                    })\n                }\n                {/* <div className=\"block function\">\n                    function\n                </div>\n                <div className=\"block if\">\n                    if\n                    <AddBlockButton></AddBlockButton>\n                </div>\n                <div className=\"block loop\">\n                    loop\n                    <div className=\"block function\">\n                        function\n                    </div>\n                    <AddBlockButton></AddBlockButton>\n                </div>\n                <div className=\"block if\">\n                    if\n                    <div className=\"block loop\">\n                        loop\n                        <div className=\"block function\">\n                            function\n                        </div>\n                        <AddBlockButton></AddBlockButton>\n                    </div>\n                    <AddBlockButton></AddBlockButton>\n                </div> */}\n                <AddBlockButton parentBlockIndex=\"-1\"/>\n                <button onClick={() => {this.startSimulation()}}>Start Simulation</button>\n            </div>\n        );\n    }\n}\n\nexport default CodeEngine;\n","import React, { Component } from 'react';\n\nclass LevelTitle extends Component {\n    render() {\n        return (\n            <div className=\"titlePanel\">\n                <h1>{this.props.heading}</h1>\n                <p>{this.props.subheading}</p>\n            </div>\n        )\n    }\n}\n\nexport default LevelTitle\n","import React, { Component } from 'react';\n\nclass LevelInstructions extends Component {\n    render = () => {\n        return (\n            <div className=\"instructionsPanel\">\n                <div className=\"instructionsHeading\">\n                    Instructions\n                </div>\n                <p>{this.props.children}</p>\n            </div>\n        )\n    }\n}\n\nexport default LevelInstructions\n","import React, { Component } from 'react';\nimport * as BABYLON from 'babylonjs';\nimport Globals from '../../Globals';\n\nclass ObjectivePoint extends Component {\n    constructor(props) {\n        super(props);\n        this.mesh = undefined;\n    }\n    \n    componentDidMount = () => {\n        this.createMesh();\n        this.applyMaterial();\n        this.startSpawnAnimation();\n    }\n\n    componentWillUnmount = () => {\n        this.mesh.dispose();\n    }\n\n    createMesh = () => {\n        // Read values from component props. Load default value if not defined.\n        const posX = this.props.posX ? this.props.posX : 0;\n        const posY = this.props.posY ? this.props.posY : 0;\n        const posZ = this.props.posZ ? this.props.posZ : 0;\n\n        // Create mesh\n        this.mesh = BABYLON.MeshBuilder.CreateBox(\n            `objectivePoint_${posX},${posY},${posZ}`,\n            { height: 1, width: 1, depth: 1 },\n            Globals.scene\n        );\n\n        // Modify mesh properties\n        this.mesh.position.x = posX;\n        this.mesh.position.y = posY;\n        this.mesh.position.z = posZ;\n    }\n\n    applyMaterial = () => {\n        let material = new BABYLON.StandardMaterial(\"StoneBlockMaterial\", Globals.scene);\n        // let shaderMaterial = new BABYLON.ShaderMaterial(\n        //     \"objectiveShader\", \n        //     Globals.scene, \n        //     \"/cg-final-project/assets/other/ObjectivePoint\",\n        //     {\n        //     attributes: [\"position\", \"normal\", \"uv\"],\n        //     uniforms: [\"world\", \"worldView\", \"worldViewProjection\", \"view\", \"projection\", \"time\", \"direction\" ],\n        //     // defines: [\"MyDefine\"],\n        //     needAlphaBlending: true,\n        //     needAlphaTesting: true\n        //     }\n        // );\n        // let shaderMaterial = new BABYLON.ShaderMaterial(\"shader\", Globals.scene, {\n        //     vertexElement: \"objectivePointShader\",\n        //     // fragmentElement: \"fragmentShaderCode\"\n        // }, {\n        //     attributes: [\"position\", \"normal\", \"uv\"],\n        //     // uniforms: [\"world\", \"worldView\", \"worldViewProjection\", \"view\", \"project\"]\n        // });\n        material.specularColor = new BABYLON.Color3(0, 0, 0);\n        material.backFaceCulling = false;\n\n        // Apply material to mesh\n        // this.mesh.material = shaderMaterial;\n    }\n\n    startSpawnAnimation = () => {\n        const spawnAnimation = new BABYLON.Animation(\n            \"spawnAnimation\", \n            \"scaling\", \n            Globals.framerate, \n            BABYLON.Animation.ANIMATIONTYPE_VECTOR3,\n            BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n        );\n        \n        const yOffset = this.props.yOffset ? this.props.yOffset : 0;\n        const posY = this.props.posY ? this.props.posY : 0;\n        const animationDelaySeconds = (yOffset + posY) * 0.2 + 1;\n        \n        const keyFrames = [];\n        keyFrames.push({\n            frame: 0,\n            value: BABYLON.Vector3.Zero(),\n        });\n        keyFrames.push({\n            frame: animationDelaySeconds * Globals.framerate,\n            value: BABYLON.Vector3.Zero()\n        });\n        keyFrames.push({\n            frame: (animationDelaySeconds * Globals.framerate) + (0.3 * Globals.framerate),\n            value: BABYLON.Vector3.One(),\n        });\n        spawnAnimation.setKeys(keyFrames);\n\n        this.mesh.animations.push(spawnAnimation);\n        \n        Globals.scene.beginAnimation(this.mesh, 0, (animationDelaySeconds * Globals.framerate) + (0.3 * Globals.framerate), false);\n    }\n\n\n    render = () => {\n        return (\n            <div></div>\n        )\n    }\n}\n\nexport default ObjectivePoint\n","import React, { Component } from 'react';\nimport ENVIRONMENT from '../gameObjects/_ENVIRONMENT';\nimport Globals from '../../Globals';\n\n// Babylon Objects\nimport StoneBlock from '../gameObjects/StoneBlock';\nimport GrassBlock from '../gameObjects/GrassBlock';\nimport Character from '../gameObjects/Character';\n\n// UI and Code Engine\nimport CodeEngine from '../codeEngine/CodeEngine';\nimport LevelTitle from '../uiElements/LevelTitle';\nimport LevelInstructions from '../uiElements/LevelInstructions';\nimport ObjectivePoint from '../gameObjects/ObjectivePoint';\n\nclass LevelOne extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            environmentSpawned: false\n        }\n\n        // level[y][x][z]\n        this.level = [ \n            [   // First Layer\n                [0, 0, 1, 0, 0],\n                [0, 1, 1, 1, 0],\n                [1, 1, 1, 1, 1],\n                [0, 1, 1, 1, 0],\n                [0, 0, 1, 0, 0],\n            ],\n            [   // Second Layer\n                [0, 1, 1, 1, 0],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [0, 1, 1, 1, 0],\n            ],\n            [   // ...\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n            ],\n            [\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2],\n            ],\n            [\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 99],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n            ]\n        ]\n        this.yOffset = 3;\n        Globals.currentLevel = this;\n    }\n\n    componentDidMount() {\n        \n    }\n\n    spawnEnvironmentItem(x, y, z, type) {\n        // Apply y spawn offset\n        y -= this.yOffset;\n\n        switch(type) {\n            case ENVIRONMENT.NONE:\n                return <div></div>\n            case ENVIRONMENT.STONE:\n                return <StoneBlock posX={x} posY={y} posZ={z} yOffset={this.yOffset}/>;\n            case ENVIRONMENT.GRASS:\n                return <GrassBlock posX={x} posY={y} posZ={z} yOffset={this.yOffset}/>;\n            case ENVIRONMENT.OBJECTIVE:\n                return <ObjectivePoint posX={x} posY={y} posZ={z} yOffset={this.yOffset}/>;\n            default:\n                return <div></div>;\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {/* Level Details */}\n                <div className=\"levelPanel\">\n                    <LevelTitle heading=\"Level One\" subheading=\"The Basics\"/>\n                    <CodeEngine yOffset={this.yOffset}/>\n                    <LevelInstructions>\n                        <b>Welcome to your first level!</b><br/>\n                        To complete this level, you need to walk the\n                        character to the finish line using functions. \n                        To add a function, press the plus button above.\n                    </LevelInstructions>\n                </div>\n\n                {/* Spawn map environment */}\n                {\n                    // Spawn the map according to this.level\n                    this.level.map((yData, yIndex) => {\n                        return <div className={`env_y_${yIndex}`} key={yIndex}> {\n                            yData.map((xData, xIndex) => {\n                                return <div className={`env_x_${xIndex}`} key={xIndex}> {\n                                    xData.map((zData, zIndex) => {\n                                        return <div className={`env_z_${zIndex}`} key={zIndex}> {\n                                            this.spawnEnvironmentItem(\n                                                xIndex, yIndex, zIndex, zData\n                                            )\n                                        } </div>\n                                    })\n                                } </div>\n                            })\n                        } </div>\n                    })\n                }\n\n                {/* Spawn player object */}\n                <Character posX={0} posY={1} posZ={0} yOffset={this.yOffset} faceDirection={2}/>\n                <button data-toggle=\"modal\" data-target=\"#addBlockModal\" className=\"btn btn-sm text-white btn-success mr-2\">TEST ADD BLOCK MODAL</button>\n            </div>\n        )\n    }\n}\n\nexport default LevelOne\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport 'babylonjs-loaders';\nimport BabylonCanvas from './BabylonCanvas';\nimport Navbar from './components/Navbar';\nimport AddBlockModal from './components/uiElements/AddBlockModal';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n// Levels\nimport LevelOne from './components/levels/LevelOne';\n\nclass App extends Component {\n    state = {  }\n\n    render() {\n        return (\n            <Router>\n                <div className=\"App\">\n                    <Navbar/>\n                    <ul style={{color: \"white\"}}>\n                        <li>Show Debugger: [</li>\n                        <li>Hide Debugger: ]</li>\n                        <li><Link to=\"/cg-final-project/\">Load Main Menu</Link></li>\n                        <li><Link to=\"/cg-final-project/level-1\">Load Level 1</Link></li>\n                    </ul>\n                    <div className=\"AppContainer\">\n                        <BabylonCanvas/>\n                        <Switch className=\"LevelContainer\">\n                            {/* <Route path=\"/\"> */}\n                                {/* Create main menu scene */}\n                            {/* </Route> */}\n                            <Route path=\"/cg-final-project/level-1\">\n                                <LevelOne/>\n                            </Route>\n                        </Switch>\n                    </div>\n                </div>\n                <AddBlockModal></AddBlockModal>\n            </Router>\n        )\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}