{"version":3,"sources":["BabylonCanvas.js","Globals.js","components/Navbar.js","components/gameObjects/_ENVIRONMENT.js","components/gameObjects/StoneBlock.js","components/gameObjects/GrassBlock.js","components/gameObjects/Character.js","components/codeEngine/CodeEngine.js","components/uiElements/LevelTitle.js","components/uiElements/LevelInstructions.js","components/levels/LevelOne.js","App.js","reportWebVitals.js","index.js"],"names":["scene","boxMesh","this","undefined","engine","framerate","character","BabylonCanvas","props","componentDidMount","BABYLON","canvas","Globals","addLight","addCamera","addSkybox","window","addEventListener","onWindowResize","onKeydownEvent","runRenderLoop","render","registerBeforeRender","event","resize","keyCode","debugLayer","show","hide","light","photoSphere","CreateSphere","skyboxMaterial","emissiveTexture","diffuseColor","specularColor","uOffset","Math","PI","backFaceCulling","material","arcRotateCamera","panningSensibility","lowerRadiusLimit","upperRadiusLimit","attachControl","setPosition","beta","addGround","ground","CreateGround","height","width","subdivisions","groundMaterial","diffuseTexture","addModels","CreateBox","depth","position","y","woodMaterial","state","useWireFrame","shouldAnimate","removeEventListener","className","ref","Component","Navbar","href","Object","freeze","NONE","STONE","GRASS","PATH","StoneBlock","createMesh","applyMaterial","startSpawnAnimation","componentWillUnmount","mesh","dispose","posX","posY","posZ","x","z","updateSamplingMode","NEAREST_NEAREST_MIPLINEAR","spawnAnimation","ANIMATIONTYPE_VECTOR3","ANIMATIONLOOPMODE_CYCLE","animationDelaySeconds","yOffset","keyFrames","push","frame","value","Zero","One","setKeys","animations","beginAnimation","GrassBlock","reflectionTexture","coordinatesMode","SKYBOX_MODE","Character","idleAnimation","walkingAnimation","characterParentMaterial","alpha","characterModel","ImportMesh","meshes","particleSystem","skeleton","animationGroups","characterModelMeshes","forEach","scaling","xOffset","zOffset","meshMaterial","ambientColor","setParent","walk","moveAxis","characterFaceDirection","moveDirection","walkAnimation","ANIMATIONTYPE_FLOAT","walkKeyframes","animationSpeed","length","pop","stop","start","from","to","setTimeout","turnLeft","abs","console","log","turnLeftAnimation","turnLeftKeyframes","rotation","turnRight","turnRightAnimation","turnRightKeyframes","onClick","CodeEngine","startSimulation","addBlock","blockType","functions","isRunning","CODE_BLOCK_TYPE","WALK","TURN","IF","LOOP","LevelTitle","heading","subheading","LevelInstructions","children","LevelOne","environmentSpawned","level","type","ENVIRONMENT","map","yData","yIndex","xData","xIndex","zData","zIndex","spawnEnvironmentItem","App","style","color","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cb13792.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as BABYLON from \"babylonjs\";\nimport Globals from './Globals';\n\n// Temp definitions, delete later\nvar scene;\nvar boxMesh;\n\nclass BabylonCanvas extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { useWireFrame: false, shouldAnimate: false };\n        this.light = undefined;\n        this.arcRotateCamera = undefined;\n    }\n    \n    componentDidMount = () => {        \n        // Initialize scene and engine\n        this.engine = new BABYLON.Engine(this.canvas, true);\n        Globals.scene = new BABYLON.Scene(this.engine);\n        \n        // Intitialize the scene with the required elements\n        this.addLight();\n        this.addCamera();\n        this.addSkybox();\n\n        // this.addModels();\n        // this.addGround();\n\n        // Add Events\n        window.addEventListener(\"resize\", this.onWindowResize, false);\n        window.addEventListener(\"keydown\", this.onKeydownEvent);\n\n        // Render Loop\n        this.engine.runRenderLoop(() => {\n            Globals.scene.render();\n        });\n\n        // Handle animations and per frame calculations\n        // Simillar to Update() function in Unity\n        Globals.scene.registerBeforeRender(() => {\n            \n        });\n    };\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.onWindowResize, false);\n    }\n\n    onWindowResize = event => {\n        this.engine.resize();\n    };\n\n    onKeydownEvent = event => {\n        switch(event.keyCode) {\n            case 219: // [\n                Globals.scene.debugLayer.show();\n                break;\n            case 221: // ]\n                Globals.scene.debugLayer.hide();\n                break;\n            default:\n                break;\n        }\n    } \n\n    addLight = () => {\n        // Create a basic light, aiming 0,1,0 - meaning, to the sky.\n        this.light = new BABYLON.HemisphericLight(\n            \"light1\",\n            new BABYLON.Vector3(0, -1, 0),\n            Globals.scene\n        );\n    };\n\n    addSkybox = () => {\n        var photoSphere = BABYLON.Mesh.CreateSphere(\"skybox\", 16.0, 50.0, scene);\n\n        var skyboxMaterial = new BABYLON.StandardMaterial(\"skyboxMaterial\", scene);\n        skyboxMaterial.emissiveTexture = new BABYLON.Texture(\n            \"assets/other/skybox.png\",\n            Globals.scene,\n            1,\n            0\n        );\n        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\n        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\n        skyboxMaterial.emissiveTexture.uOffset = -Math.PI / 2; // left-right\n        skyboxMaterial.emissiveTexture.uOffset = 0.1; // up-down\n        skyboxMaterial.backFaceCulling = false;\n\n        photoSphere.material = skyboxMaterial;\n    }\n\n    addCamera = () => {\n        // ---------------ArcRotateCamera or Orbit Control----------\n        this.arcRotateCamera = new BABYLON.ArcRotateCamera(\n            \"MainCamera\",\n            Math.PI / 2,\n            Math.PI / 4,\n            10,\n            new BABYLON.Vector3(2, 0, 2),\n            Globals.scene\n        );\n        \n        this.arcRotateCamera.panningSensibility = 0;\n        this.arcRotateCamera.lowerRadiusLimit = this.arcRotateCamera.upperRadiusLimit = 10;\n\n        // camera.inertia = 0;\n        // camera.angularSensibilityX = 250;\n        // camera.angularSensibilityY = 250;\n\n        // This attaches the camera to the canvas\n        this.arcRotateCamera.attachControl(this.canvas, true);\n        this.arcRotateCamera.setPosition(new BABYLON.Vector3(7, 7, 7));\n        this.arcRotateCamera.beta = Math.PI / 2.5;\n    };\n\n    addGround = () => {\n        // Create a built-in \"ground\" shape.\n        var ground = BABYLON.MeshBuilder.CreateGround(\n            \"ground1\",\n            { height: 6, width: 6, subdivisions: 2 },\n            scene\n        );\n        var groundMaterial = new BABYLON.StandardMaterial(\"grass0\", scene);\n        groundMaterial.diffuseTexture = new BABYLON.Texture(\n            \"./assets/ground.jpeg\",\n            scene\n        );\n        ground.material = groundMaterial;\n    };\n\n    addModels = () => {\n        // Add BOX\n        boxMesh = BABYLON.MeshBuilder.CreateBox(\n            \"box\",\n            { height: 1, width: 1, depth: 1 },\n            scene\n        );\n        boxMesh.position.y = 1;\n\n        var woodMaterial = new BABYLON.StandardMaterial(\"wood\", scene);\n        woodMaterial.diffuseTexture = new BABYLON.Texture(\n            \"./assets/portal_cube.png\",\n            scene\n        );\n        boxMesh.material = woodMaterial;\n    };\n\n    render() {\n        return (\n            <canvas\n                className=\"renderCanvas\"\n                ref={canvas => {\n                    this.canvas = canvas;\n                }}\n            />\n        );\n    }\n}\nexport default BabylonCanvas;","class Globals {\n    constructor() {\n        this.scene = undefined;\n        this.engine = undefined;\n        this.framerate = 60;\n        this.character = undefined;\n    }\n}\n\nexport default new Globals();","import React, { Component } from 'react';\n\nclass Navbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  }\n    }\n    render() { \n        return (\n            <nav className=\"navbar navbar-light bg-light\">\n                <a className=\"navbar-brand\" href=\"/\">REEEE</a>\n            </nav>\n        );\n    }\n}\n \nexport default Navbar;","/*\n    _ENVIRONMENT.js\n    Environment game objects id definition. Used for map spawning and referencing\n*/\n\nclass ENVIRONMENT {\n    NONE = 0;\n    STONE = 1;\n    GRASS = 2;\n    PATH = 3;\n}\n\n// Freeze the object to prevent changes\nexport default Object.freeze(new ENVIRONMENT());","import React, { Component } from 'react';\nimport * as BABYLON from 'babylonjs';\nimport Globals from '../../Globals';\n\nclass StoneBlock extends Component {\n    constructor(props) {\n        super(props);\n        this.mesh = undefined;\n    }\n    \n    componentDidMount = () => {\n        this.createMesh();\n        this.applyMaterial();\n        this.startSpawnAnimation();\n    }\n\n    componentWillUnmount = () => {\n        this.mesh.dispose();\n    }\n\n    createMesh = () => {\n        // Read values from component props. Load default value if not defined.\n        const posX = this.props.posX ? this.props.posX : 0;\n        const posY = this.props.posY ? this.props.posY : 0;\n        const posZ = this.props.posZ ? this.props.posZ : 0;\n\n        // Create mesh\n        this.mesh = BABYLON.MeshBuilder.CreateBox(\n            `stoneBlock_${posX},${posY},${posZ}`,\n            { height: 1, width: 1, depth: 1 },\n            Globals.scene\n        );\n\n        // Modify mesh properties\n        this.mesh.position.x = posX;\n        this.mesh.position.y = posY;\n        this.mesh.position.z = posZ;\n    }\n\n    applyMaterial = () => {\n        let material = new BABYLON.StandardMaterial(\"StoneBlockMaterial\", Globals.scene);\n        \n        // \n        material.diffuseTexture = new BABYLON.Texture(\"assets/textures/stone.png\", Globals.scene);\n        material.diffuseTexture.updateSamplingMode(BABYLON.Texture.NEAREST_NEAREST_MIPLINEAR);\n\n        // Use CubeTexture to map the texture to each face\n        // material.reflectionTexture = new BABYLON.CubeTexture(\"/assets/textures/grass/grass\", Globals.scene);\n        // material.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\n        // material.reflectionTexture.updateSamplingMode(BABYLON.Texture.NEAREST_NEAREST_MIPLINEAR);\n        // material.diffuseColor = new BABYLON.Color3(0, 0, 0);\n        material.specularColor = new BABYLON.Color3(0, 0, 0);\n        material.backFaceCulling = false;\n\n        // Apply material to mesh\n        this.mesh.material = material;\n    }\n\n    startSpawnAnimation = () => {\n        const spawnAnimation = new BABYLON.Animation(\n            \"spawnAnimation\", \n            \"scaling\", \n            Globals.framerate, \n            BABYLON.Animation.ANIMATIONTYPE_VECTOR3,\n            BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n        );\n        \n        const yOffset = this.props.yOffset ? this.props.yOffset : 0;\n        const posY = this.props.posY ? this.props.posY : 0;\n        const animationDelaySeconds = (yOffset + posY) * 0.2;\n        \n        const keyFrames = [];\n        keyFrames.push({\n            frame: 0,\n            value: BABYLON.Vector3.Zero(),\n        });\n        keyFrames.push({\n            frame: animationDelaySeconds * Globals.framerate,\n            value: BABYLON.Vector3.Zero()\n        });\n        keyFrames.push({\n            frame: (animationDelaySeconds * Globals.framerate) + (0.3 * Globals.framerate),\n            value: BABYLON.Vector3.One(),\n        });\n        spawnAnimation.setKeys(keyFrames);\n\n        this.mesh.animations.push(spawnAnimation);\n        \n        Globals.scene.beginAnimation(this.mesh, 0, (animationDelaySeconds * Globals.framerate) + (0.3 * Globals.framerate), false);\n    }\n\n\n    render = () => {\n        return (\n            <div></div>\n        )\n    }\n}\n\nexport default StoneBlock\n","import React, { Component } from 'react';\nimport * as BABYLON from 'babylonjs';\nimport Globals from '../../Globals';\n\nclass GrassBlock extends Component {\n    constructor(props) {\n        super(props);\n        this.mesh = undefined;\n    }\n    \n    componentDidMount = () => {\n        this.createMesh();\n        this.applyMaterial();\n        this.startSpawnAnimation();\n    }\n\n    componentWillUnmount = () => {\n        this.mesh.dispose();\n    }\n\n    createMesh = () => {\n        // Read values from component props. Load default value if not defined.\n        const posX = this.props.posX ? this.props.posX : 0;\n        const posY = this.props.posY ? this.props.posY : 0;\n        const posZ = this.props.posZ ? this.props.posZ : 0;\n\n        // Create mesh\n        this.mesh = BABYLON.MeshBuilder.CreateBox(\n            `grassBlock_${posX},${posY},${posZ}`,\n            { height: 1, width: 1, depth: 1 },\n            Globals.scene\n        );\n\n        // Modify mesh properties\n        this.mesh.position.x = posX;\n        this.mesh.position.y = posY;\n        this.mesh.position.z = posZ;\n    }\n\n    applyMaterial = () => {\n        let material = new BABYLON.StandardMaterial(\"GrassBlockMaterial\", Globals.scene);\n        \n        // Use CubeTexture to map the texture to each face\n        material.reflectionTexture = new BABYLON.CubeTexture(\"assets/textures/grass/grass\", Globals.scene);\n        material.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\n        material.reflectionTexture.updateSamplingMode(BABYLON.Texture.NEAREST_NEAREST_MIPLINEAR);\n        material.diffuseColor = new BABYLON.Color3(0, 0, 0);\n        material.specularColor = new BABYLON.Color3(0, 0, 0);\n        material.backFaceCulling = false;\n\n        // Apply material to mesh\n        this.mesh.material = material;\n    }\n\n    startSpawnAnimation = () => {\n        const spawnAnimation = new BABYLON.Animation(\n            \"spawnAnimation\", \n            \"scaling\", \n            Globals.framerate, \n            BABYLON.Animation.ANIMATIONTYPE_VECTOR3,\n            BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n        );\n        \n        const yOffset = this.props.yOffset ? this.props.yOffset : 0;\n        const posY = this.props.posY ? this.props.posY : 0;\n        const animationDelaySeconds = (yOffset + posY) * 0.2;\n        \n        const keyFrames = [];\n        keyFrames.push({\n            frame: 0,\n            value: BABYLON.Vector3.Zero(),\n        });\n        keyFrames.push({\n            frame: animationDelaySeconds * Globals.framerate,\n            value: BABYLON.Vector3.Zero()\n        });\n        keyFrames.push({\n            frame: (animationDelaySeconds * Globals.framerate) + (0.3 * Globals.framerate),\n            value: BABYLON.Vector3.One(),\n        });\n        spawnAnimation.setKeys(keyFrames);\n\n        this.mesh.animations.push(spawnAnimation);\n        \n        Globals.scene.beginAnimation(this.mesh, 0, (animationDelaySeconds * Globals.framerate) + (0.3 * Globals.framerate), false);\n    }\n\n    render = () => {\n        return (\n            <div></div>\n        )\n    }\n}\n\nexport default GrassBlock\n","import React, { Component } from 'react';\nimport * as BABYLON from 'babylonjs';\nimport Globals from '../../Globals';\n\nclass Character extends Component {\n    constructor(props) {\n        super(props);\n\n        // Character\n        this.mesh = undefined;\n        this.characterModel = undefined;\n        this.characterModelMeshes = undefined;\n        this.characterFaceDirection = 0;    // Value represents N E S W\n        \n        // Object position offset\n        this.xOffset = 0;\n        this.yOffset = -0.5;\n        this.zOffset = 0;\n\n        // Animations\n        this.animationSpeed = 0.5;\n        this.turnLeftAnimation = undefined;\n        this.idleAnimation = undefined;\n        this.walkingAnimation = undefined;\n\n        // Put a global reference to this object\n        Globals.character = this;\n    }\n    \n    componentDidMount = () => {\n        this.createMesh();\n    }\n    \n    componentWillUnmount = () => {\n        Globals.character = undefined;\n        this.mesh.dispose();\n        this.idleAnimation = this.walkingAnimation = null;\n    }\n    \n    createMesh = () => {\n        // Read values from component props. Load default value if not defined.\n        const posX = this.props.posX ? this.props.posX : 0;\n        const posY = this.props.posY ? this.props.posY : 0;\n        const posZ = this.props.posZ ? this.props.posZ : 0;\n        \n        // Create parent mesh\n        this.mesh = BABYLON.MeshBuilder.CreateBox(\n            \"character\",\n            { height: 1, width: 1, depth: 1 },\n            Globals.scene\n        );\n\n        // Create parent material for transparency\n        const characterParentMaterial = new BABYLON.Material(\"characterParentMaterial\");\n        characterParentMaterial.alpha = 0;\n            \n        // Modify parent object properties\n        this.mesh.position = new BABYLON.Vector3(posX, posY, posZ);\n        this.mesh.material = characterParentMaterial;\n        \n\n        // Load mesh\n        this.characterModel = BABYLON.SceneLoader.ImportMesh(\n            \"\",\n            \"assets/obj/\",\n            \"character_running.glb\",\n            Globals.scene,\n            (meshes, particleSystem, skeleton, animationGroups) => {               \n                // Expose the meshes and animations to the outside world\n                this.characterModelMeshes = meshes;\n                this.idleAnimation = animationGroups[0];\n                this.walkingAnimation = animationGroups[1];\n                \n                \n                // Modify mesh properties\n                meshes.forEach(mesh => {\n                    mesh.scaling = new BABYLON.Vector3(0.1, 0.1, 0.1);\n                    mesh.position = new BABYLON.Vector3(\n                        posX + this.xOffset,\n                        posY + this.yOffset,\n                        posZ + this.zOffset\n                    );\n                    const meshMaterial = new BABYLON.StandardMaterial(\"characterMaterial\");\n                    meshMaterial.specularColor = new BABYLON.Color3(1 ,1 ,1);\n                    meshMaterial.diffuseColor = new BABYLON.Color3(1, 0.6, 0);\n                    meshMaterial.backFaceCulling = false;\n                    meshMaterial.ambientColor = new BABYLON.Color3(0.23, 0.98, 0.53);\n\n                    mesh.material = meshMaterial;\n                    mesh.setParent(this.mesh);\n                });\n            }\n        );\n    }\n\n    walk = () => {\n        // Determine the move axis and move direction\n        const moveAxis = this.characterFaceDirection % 2 === 0 ? \"z\" : \"x\";\n        const moveDirection = this.characterFaceDirection >=2 ? 1 : -1;\n\n        const walkAnimation = new BABYLON.Animation(\n            \"characterTurnleft\",\n            `position.${moveAxis}`,\n            Globals.framerate,\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT,\n            BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n        );\n\n        const walkKeyframes = [];\n        walkKeyframes.push({\n            frame: 0,\n            value: moveAxis === \"x\" ? this.mesh.position.x : this.mesh.position.z\n        });\n        walkKeyframes.push({\n            frame: this.animationSpeed * Globals.framerate,\n            value: (moveAxis === \"x\" ? this.mesh.position.x : this.mesh.position.z) + moveDirection\n        });\n\n        walkAnimation.setKeys(walkKeyframes);\n\n        // Pop the last animation before adding another one\n        if (this.mesh.animations.length > 0)\n            this.mesh.animations.pop();\n        this.mesh.animations.push(walkAnimation);\n\n        Globals.scene.beginAnimation(this.mesh, 0, this.animationSpeed * Globals.framerate, false);\n        this.idleAnimation.stop();\n        this.walkingAnimation.start(false, 2.0, this.walkingAnimation.from, this.walkingAnimation.to, false);\n        \n        // Stop animation after finished walking\n        setTimeout(() => {\n            this.walkingAnimation.stop();\n            this.idleAnimation.start(true, 1.0, this.idleAnimation.from, this.idleAnimation.to, false);\n        }, this.animationSpeed * 1000);\n    }\n\n    turnLeft = () => {\n        // Update the direction of the character\n        if (this.characterFaceDirection === 0)\n            this.characterFaceDirection = 3;\n        else\n            this.characterFaceDirection = Math.abs((this.characterFaceDirection - 1) % 4);\n        console.log(`Rotating player to ${this.characterFaceDirection}`);\n\n        const turnLeftAnimation = new BABYLON.Animation(\n            \"characterTurnleft\",\n            \"rotation.y\",\n            Globals.framerate,\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT,\n            BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n        );\n\n        const turnLeftKeyframes = [];\n        turnLeftKeyframes.push({\n            frame: 0,\n            value: this.mesh.rotation.y\n        });\n        turnLeftKeyframes.push({\n            frame: this.animationSpeed * Globals.framerate,\n            value: this.mesh.rotation.y - Math.PI/2\n        });\n\n        turnLeftAnimation.setKeys(turnLeftKeyframes);\n        \n        // Pop the last animation before adding another one\n        if (this.mesh.animations.length > 0)\n            this.mesh.animations.pop();\n        this.mesh.animations.push(turnLeftAnimation);\n\n        Globals.scene.beginAnimation(this.mesh, 0, this.animationSpeed * Globals.framerate, false);\n    }\n\n    turnRight = () => {\n        // Update the direction of the character\n        this.characterFaceDirection = Math.abs((this.characterFaceDirection + 1) % 4);\n        console.log(`Rotating player to ${this.characterFaceDirection}`);\n\n        const turnRightAnimation = new BABYLON.Animation(\n            \"characterTurnleft\",\n            \"rotation.y\",\n            Globals.framerate,\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT,\n            BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n        );\n\n        const turnRightKeyframes = [];\n        turnRightKeyframes.push({\n            frame: 0,\n            value: this.mesh.rotation.y\n        });\n        turnRightKeyframes.push({\n            frame: this.animationSpeed * Globals.framerate,\n            value: this.mesh.rotation.y + Math.PI/2\n        });\n\n        turnRightAnimation.setKeys(turnRightKeyframes);\n        \n        // Pop the last animation before adding another one\n        if (this.mesh.animations.length > 0)\n            this.mesh.animations.pop();\n        this.mesh.animations.push(turnRightAnimation);\n\n        Globals.scene.beginAnimation(this.mesh, 0, this.animationSpeed * Globals.framerate, false);\n    }\n    \n    render = () => {\n        return (\n            <div>\n                <button onClick={this.walk}>PRESS ME DADDY</button>\n                <button onClick={this.turnLeft}>Turn Left</button>\n                <button onClick={this.turnRight}>Turn Right</button>\n            </div>\n        )\n    }\n}\n\nexport default Character\n","import React, { Component } from 'react'\n\nclass CodeEngine extends Component {\n    constructor(props) {\n        super(props);\n        // const { allowedFunctions, level } = props;\n        this.state = {\n            functions: [],\n            isRunning: false\n        }\n\n        // Block types enum\n        this.CODE_BLOCK_TYPE = Object.freeze({\n            WALK: 0,\n            TURN: 1,\n            IF: 2,\n            LOOP: 3\n        });\n    }\n\n    componentDidMount = () => {\n\n    }\n\n    startSimulation = () => {\n\n    }\n\n    addBlock = (blockType) => {\n\n    }\n\n    render = () => {\n        return (\n            <div className=\"codeEngine\">\n                <div className=\"block function\">\n                    function\n                </div>\n                <div className=\"block if\">\n                    if\n                </div>\n                <div className=\"block loop\">\n                    loop\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CodeEngine;\n","import React, { Component } from 'react';\n\nclass LevelTitle extends Component {\n    render() {\n        return (\n            <div className=\"titlePanel\">\n                <h1>{this.props.heading}</h1>\n                <p>{this.props.subheading}</p>\n            </div>\n        )\n    }\n}\n\nexport default LevelTitle\n","import React, { Component } from 'react';\n\nclass LevelInstructions extends Component {\n    render = () => {\n        return (\n            <div className=\"instructionsPanel\">\n                <div className=\"instructionsHeading\">\n                    Instructions\n                </div>\n                <p>{this.props.children}</p>\n            </div>\n        )\n    }\n}\n\nexport default LevelInstructions\n","import React, { Component } from 'react';\nimport ENVIRONMENT from '../gameObjects/_ENVIRONMENT';\n\n// Babylon Objects\nimport StoneBlock from '../gameObjects/StoneBlock';\nimport GrassBlock from '../gameObjects/GrassBlock';\nimport Character from '../gameObjects/Character';\n\n// UI and Code Engine\nimport CodeEngine from '../codeEngine/CodeEngine';\nimport LevelTitle from '../uiElements/LevelTitle';\nimport LevelInstructions from '../uiElements/LevelInstructions';\n\nclass LevelOne extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            environmentSpawned: false\n        }\n\n        // level[y][x][z]\n        this.level = [ \n            [   // First Layer\n                [0, 0, 1, 0, 0],\n                [0, 1, 1, 1, 0],\n                [1, 1, 1, 1, 1],\n                [0, 1, 1, 1, 0],\n                [0, 0, 1, 0, 0],\n            ],\n            [   // Second Layer\n                [0, 1, 1, 1, 0],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [0, 1, 1, 1, 0],\n            ],\n            [   // ...\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n            ],\n            [\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2],\n            ]\n        ]\n        this.yOffset = 3;\n    }\n\n    componentDidMount() {\n        \n    }\n\n    spawnEnvironmentItem(x, y, z, type) {\n        // Apply y spawn offset\n        y -= this.yOffset;\n\n        switch(type) {\n            case ENVIRONMENT.NONE:\n                return <div></div>\n            case ENVIRONMENT.STONE:\n                return <StoneBlock posX={x} posY={y} posZ={z} yOffset={this.yOffset}/>;\n            case ENVIRONMENT.GRASS:\n                return <GrassBlock posX={x} posY={y} posZ={z} yOffset={this.yOffset}/>;\n            default:\n                return <div></div>;\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {/* Level Details */}\n                <div className=\"levelPanel\">\n                    <LevelTitle heading=\"Level One\" subheading=\"The Basics\"/>\n                    <CodeEngine/>\n                    <LevelInstructions>\n                        <b>Welcome to your first level!</b><br/>\n                        To complete this level, you need to walk the\n                        character to the finish line using functions. \n                        To add a function, press the plus button above.\n                    </LevelInstructions>\n                </div>\n\n                {/* Spawn map environment */}\n                {\n                    // Spawn the map according to this.level\n                    this.level.map((yData, yIndex) => {\n                        return <div className={`env_y_${yIndex}`} key={yIndex}> {\n                            yData.map((xData, xIndex) => {\n                                return <div className={`env_x_${xIndex}`} key={xIndex}> {\n                                    xData.map((zData, zIndex) => {\n                                        return <div className={`env_z_${zIndex}`} key={zIndex}> {\n                                            this.spawnEnvironmentItem(\n                                                xIndex, yIndex, zIndex, zData\n                                            )\n                                        } </div>\n                                    })\n                                } </div>\n                            })\n                        } </div>\n                    })\n                }\n\n                {/* Spawn player object */}\n                <Character posX={0} posY={1} posZ={0}/>\n            </div>\n        )\n    }\n}\n\nexport default LevelOne\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport 'babylonjs-loaders';\nimport BabylonCanvas from './BabylonCanvas';\nimport Navbar from './components/Navbar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n// Levels\nimport LevelOne from './components/levels/LevelOne';\n\nclass App extends Component {\n    state = {  }\n\n    render() {\n        return (\n            <Router>\n                <div className=\"App\">\n                    <Navbar/>\n                    <ul style={{color: \"white\"}}>\n                        <li>Show Debugger: [</li>\n                        <li>Hide Debugger: ]</li>\n                        <li><Link to=\"/cg-final-project/\">Load Main Menu</Link></li>\n                        <li><Link to=\"/cg-final-project/level-1\">Load Level 1</Link></li>\n                    </ul>\n                    <div className=\"AppContainer\">\n                        <BabylonCanvas/>\n                        <Switch className=\"LevelContainer\">\n                            {/* <Route path=\"/\"> */}\n                                {/* Create main menu scene */}\n                            {/* </Route> */}\n                            <Route path=\"/cg-final-project/level-1\">\n                                <LevelOne/>\n                            </Route>\n                        </Switch>\n                    </div>\n                </div>\n            </Router>\n        )\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}