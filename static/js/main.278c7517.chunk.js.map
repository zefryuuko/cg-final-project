{"version":3,"sources":["BabylonCanvas.js","Globals.js","components/Navbar.js","components/gameObjects/_ENVIRONMENT.js","components/gameObjects/StoneBlock.js","components/gameObjects/GrassBlock.js","components/gameObjects/Character.js","components/codeEngine/CodeEngine.js","components/uiElements/LevelTitle.js","components/uiElements/LevelInstructions.js","components/levels/LevelOne.js","App.js","reportWebVitals.js","index.js"],"names":["scene","boxMesh","this","undefined","engine","framerate","character","BabylonCanvas","props","componentDidMount","BABYLON","canvas","Globals","addLight","addCamera","addSkybox","window","addEventListener","onWindowResize","onKeydownEvent","runRenderLoop","render","registerBeforeRender","event","resize","keyCode","debugLayer","show","hide","light","photoSphere","CreateSphere","skyboxMaterial","emissiveTexture","diffuseColor","specularColor","uOffset","Math","PI","backFaceCulling","material","arcRotateCamera","attachControl","setPosition","beta","addGround","ground","CreateGround","height","width","subdivisions","groundMaterial","diffuseTexture","addModels","CreateBox","depth","position","y","woodMaterial","state","useWireFrame","shouldAnimate","removeEventListener","className","ref","Component","Navbar","href","Object","freeze","NONE","STONE","GRASS","PATH","StoneBlock","createMesh","applyMaterial","componentWillUnmount","mesh","dispose","posX","posY","posZ","x","z","updateSamplingMode","NEAREST_NEAREST_MIPLINEAR","GrassBlock","reflectionTexture","coordinatesMode","SKYBOX_MODE","Character","idleAnimation","walkingAnimation","characterParentMaterial","alpha","characterModel","ImportMesh","meshes","particleSystem","skeleton","animationGroups","characterModelMeshes","forEach","scaling","xOffset","yOffset","zOffset","meshMaterial","ambientColor","setParent","walk","moveAxis","characterFaceDirection","moveDirection","walkAnimation","ANIMATIONTYPE_FLOAT","ANIMATIONLOOPMODE_CYCLE","walkKeyframes","push","frame","value","animationSpeed","setKeys","animations","length","pop","beginAnimation","stop","start","from","to","setTimeout","turnLeft","abs","console","log","turnLeftAnimation","turnLeftKeyframes","rotation","turnRight","turnRightAnimation","turnRightKeyframes","CodeEngine","LevelTitle","heading","subheading","LevelInstructions","children","LevelOne","environmentSpawned","level","type","ENVIRONMENT","map","yData","yIndex","xData","xIndex","zData","zIndex","spawnEnvironmentItem","App","style","color","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.278c7517.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as BABYLON from \"babylonjs\";\nimport Globals from './Globals';\n\n// Temp definitions, delete later\nvar scene;\nvar boxMesh;\n\nclass BabylonCanvas extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { useWireFrame: false, shouldAnimate: false };\n        this.light = undefined;\n        this.arcRotateCamera = undefined;\n    }\n    \n    componentDidMount = () => {        \n        // Initialize scene and engine\n        this.engine = new BABYLON.Engine(this.canvas, true);\n        Globals.scene = new BABYLON.Scene(this.engine);\n        \n        // Intitialize the scene with the required elements\n        this.addLight();\n        this.addCamera();\n        this.addSkybox();\n\n        // this.addModels();\n        // this.addGround();\n\n        // Add Events\n        window.addEventListener(\"resize\", this.onWindowResize, false);\n        window.addEventListener(\"keydown\", this.onKeydownEvent);\n\n        // Render Loop\n        this.engine.runRenderLoop(() => {\n            Globals.scene.render();\n        });\n\n        // Handle animations and per frame calculations\n        // Simillar to Update() function in Unity\n        Globals.scene.registerBeforeRender(() => {\n            \n        });\n    };\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.onWindowResize, false);\n    }\n\n    onWindowResize = event => {\n        this.engine.resize();\n    };\n\n    onKeydownEvent = event => {\n        switch(event.keyCode) {\n            case 219: // [\n                Globals.scene.debugLayer.show();\n                break;\n            case 221: // ]\n                Globals.scene.debugLayer.hide();\n                break;\n            default:\n                break;\n        }\n    } \n\n    addLight = () => {\n        // Create a basic light, aiming 0,1,0 - meaning, to the sky.\n        this.light = new BABYLON.HemisphericLight(\n            \"light1\",\n            new BABYLON.Vector3(0, -1, 0),\n            Globals.scene\n        );\n    };\n\n    addSkybox = () => {\n        var photoSphere = BABYLON.Mesh.CreateSphere(\"skybox\", 16.0, 50.0, scene);\n\n        var skyboxMaterial = new BABYLON.StandardMaterial(\"skyboxMaterial\", scene);\n        skyboxMaterial.emissiveTexture = new BABYLON.Texture(\n            \"assets/other/skybox.png\",\n            Globals.scene,\n            1,\n            0\n        );\n        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\n        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\n        skyboxMaterial.emissiveTexture.uOffset = -Math.PI / 2; // left-right\n        skyboxMaterial.emissiveTexture.uOffset = 0.1; // up-down\n        skyboxMaterial.backFaceCulling = false;\n\n        photoSphere.material = skyboxMaterial;\n    }\n\n    addCamera = () => {\n        // ---------------ArcRotateCamera or Orbit Control----------\n        this.arcRotateCamera = new BABYLON.ArcRotateCamera(\n            \"MainCamera\",\n            Math.PI / 2,\n            Math.PI / 4,\n            20,\n            new BABYLON.Vector3(2, 0, 2),\n            Globals.scene\n        );\n        // camera.inertia = 0;\n        // camera.angularSensibilityX = 250;\n        // camera.angularSensibilityY = 250;\n\n        // This attaches the camera to the canvas\n        this.arcRotateCamera.attachControl(this.canvas, true);\n        this.arcRotateCamera.setPosition(new BABYLON.Vector3(7, 7, 7));\n        this.arcRotateCamera.beta = Math.PI / 2.5;\n    };\n\n    addGround = () => {\n        // Create a built-in \"ground\" shape.\n        var ground = BABYLON.MeshBuilder.CreateGround(\n            \"ground1\",\n            { height: 6, width: 6, subdivisions: 2 },\n            scene\n        );\n        var groundMaterial = new BABYLON.StandardMaterial(\"grass0\", scene);\n        groundMaterial.diffuseTexture = new BABYLON.Texture(\n            \"./assets/ground.jpeg\",\n            scene\n        );\n        ground.material = groundMaterial;\n    };\n\n    addModels = () => {\n        // Add BOX\n        boxMesh = BABYLON.MeshBuilder.CreateBox(\n            \"box\",\n            { height: 1, width: 1, depth: 1 },\n            scene\n        );\n        boxMesh.position.y = 1;\n\n        var woodMaterial = new BABYLON.StandardMaterial(\"wood\", scene);\n        woodMaterial.diffuseTexture = new BABYLON.Texture(\n            \"./assets/portal_cube.png\",\n            scene\n        );\n        boxMesh.material = woodMaterial;\n    };\n\n    render() {\n        return (\n            <canvas\n                className=\"renderCanvas\"\n                ref={canvas => {\n                    this.canvas = canvas;\n                }}\n            />\n        );\n    }\n}\nexport default BabylonCanvas;","class Globals {\n    constructor() {\n        this.scene = undefined;\n        this.engine = undefined;\n        this.framerate = 60;\n        this.character = undefined;\n    }\n}\n\nexport default new Globals();","import React, { Component } from 'react';\n\nclass Navbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  }\n    }\n    render() { \n        return (\n            <nav className=\"navbar navbar-light bg-light\">\n                <a className=\"navbar-brand\" href=\"/\">REEEE</a>\n            </nav>\n        );\n    }\n}\n \nexport default Navbar;","/*\n    _ENVIRONMENT.js\n    Environment game objects id definition. Used for map spawning and referencing\n*/\n\nclass ENVIRONMENT {\n    NONE = 0;\n    STONE = 1;\n    GRASS = 2;\n    PATH = 3;\n}\n\n// Freeze the object to prevent changes\nexport default Object.freeze(new ENVIRONMENT());","import React, { Component } from 'react';\nimport * as BABYLON from 'babylonjs';\nimport Globals from '../../Globals';\n\nclass StoneBlock extends Component {\n    constructor(props) {\n        super(props);\n        this.mesh = undefined;\n    }\n    \n    componentDidMount = () => {\n        this.createMesh();\n        this.applyMaterial();\n    }\n\n    componentWillUnmount = () => {\n        this.mesh.dispose();\n    }\n\n    createMesh = () => {\n        // Read values from component props. Load default value if not defined.\n        const posX = this.props.posX ? this.props.posX : 0;\n        const posY = this.props.posY ? this.props.posY : 0;\n        const posZ = this.props.posZ ? this.props.posZ : 0;\n\n        // Create mesh\n        this.mesh = BABYLON.MeshBuilder.CreateBox(\n            `stoneBlock_${posX},${posY},${posZ}`,\n            { height: 1, width: 1, depth: 1 },\n            Globals.scene\n        );\n\n        // Modify mesh properties\n        this.mesh.position.x = posX;\n        this.mesh.position.y = posY;\n        this.mesh.position.z = posZ;\n    }\n\n    applyMaterial = () => {\n        let material = new BABYLON.StandardMaterial(\"StoneBlockMaterial\", Globals.scene);\n        \n        // \n        material.diffuseTexture = new BABYLON.Texture(\"assets/textures/stone.png\", Globals.scene);\n        material.diffuseTexture.updateSamplingMode(BABYLON.Texture.NEAREST_NEAREST_MIPLINEAR);\n\n        // Use CubeTexture to map the texture to each face\n        // material.reflectionTexture = new BABYLON.CubeTexture(\"/assets/textures/grass/grass\", Globals.scene);\n        // material.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\n        // material.reflectionTexture.updateSamplingMode(BABYLON.Texture.NEAREST_NEAREST_MIPLINEAR);\n        // material.diffuseColor = new BABYLON.Color3(0, 0, 0);\n        material.specularColor = new BABYLON.Color3(0, 0, 0);\n        material.backFaceCulling = false;\n\n        // Apply material to mesh\n        this.mesh.material = material;\n    }\n\n\n    render = () => {\n        return (\n            <div></div>\n        )\n    }\n}\n\nexport default StoneBlock\n","import React, { Component } from 'react';\nimport * as BABYLON from 'babylonjs';\nimport Globals from '../../Globals';\n\nclass GrassBlock extends Component {\n    constructor(props) {\n        super(props);\n        this.mesh = undefined;\n    }\n    \n    componentDidMount = () => {\n        this.createMesh();\n        this.applyMaterial();\n    }\n\n    componentWillUnmount = () => {\n        this.mesh.dispose();\n    }\n\n    createMesh = () => {\n        // Read values from component props. Load default value if not defined.\n        const posX = this.props.posX ? this.props.posX : 0;\n        const posY = this.props.posY ? this.props.posY : 0;\n        const posZ = this.props.posZ ? this.props.posZ : 0;\n\n        // Create mesh\n        this.mesh = BABYLON.MeshBuilder.CreateBox(\n            `grassBlock_${posX},${posY},${posZ}`,\n            { height: 1, width: 1, depth: 1 },\n            Globals.scene\n        );\n\n        // Modify mesh properties\n        this.mesh.position.x = posX;\n        this.mesh.position.y = posY;\n        this.mesh.position.z = posZ;\n    }\n\n    applyMaterial = () => {\n        let material = new BABYLON.StandardMaterial(\"GrassBlockMaterial\", Globals.scene);\n        \n        // Use CubeTexture to map the texture to each face\n        material.reflectionTexture = new BABYLON.CubeTexture(\"assets/textures/grass/grass\", Globals.scene);\n        material.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\n        material.reflectionTexture.updateSamplingMode(BABYLON.Texture.NEAREST_NEAREST_MIPLINEAR);\n        material.diffuseColor = new BABYLON.Color3(0, 0, 0);\n        material.specularColor = new BABYLON.Color3(0, 0, 0);\n        material.backFaceCulling = false;\n\n        // Apply material to mesh\n        this.mesh.material = material;\n    }\n\n\n    render = () => {\n        return (\n            <div></div>\n        )\n    }\n}\n\nexport default GrassBlock\n","import React, { Component } from 'react';\nimport * as BABYLON from 'babylonjs';\nimport Globals from '../../Globals';\n\nclass Character extends Component {\n    constructor(props) {\n        super(props);\n\n        // Character\n        this.mesh = undefined;\n        this.characterModel = undefined;\n        this.characterModelMeshes = undefined;\n        this.characterFaceDirection = 0;    // Value represents N E S W\n        \n        // Object position offset\n        this.xOffset = 0;\n        this.yOffset = -0.5;\n        this.zOffset = 0;\n\n        // Animations\n        this.animationSpeed = 0.5;\n        this.turnLeftAnimation = undefined;\n        this.idleAnimation = undefined;\n        this.walkingAnimation = undefined;\n\n        // Put a global reference to this object\n        Globals.character = this;\n    }\n    \n    componentDidMount = () => {\n        this.createMesh();\n    }\n    \n    componentWillUnmount = () => {\n        Globals.character = undefined;\n        this.mesh.dispose();\n        this.idleAnimation = this.walkingAnimation = null;\n    }\n    \n    createMesh = () => {\n        // Read values from component props. Load default value if not defined.\n        const posX = this.props.posX ? this.props.posX : 0;\n        const posY = this.props.posY ? this.props.posY : 0;\n        const posZ = this.props.posZ ? this.props.posZ : 0;\n        \n        // Create parent mesh\n        this.mesh = BABYLON.MeshBuilder.CreateBox(\n            \"character\",\n            { height: 1, width: 1, depth: 1 },\n            Globals.scene\n        );\n\n        // Create parent material for transparency\n        const characterParentMaterial = new BABYLON.Material(\"characterParentMaterial\");\n        characterParentMaterial.alpha = 0;\n            \n        // Modify parent object properties\n        this.mesh.position = new BABYLON.Vector3(posX, posY, posZ);\n        this.mesh.material = characterParentMaterial;\n        \n\n        // Load mesh\n        this.characterModel = BABYLON.SceneLoader.ImportMesh(\n            \"\",\n            \"assets/obj/\",\n            \"character_running.glb\",\n            Globals.scene,\n            (meshes, particleSystem, skeleton, animationGroups) => {               \n                // Expose the meshes and animations to the outside world\n                this.characterModelMeshes = meshes;\n                this.idleAnimation = animationGroups[0];\n                this.walkingAnimation = animationGroups[1];\n                \n                \n                // Modify mesh properties\n                meshes.forEach(mesh => {\n                    mesh.scaling = new BABYLON.Vector3(0.1, 0.1, 0.1);\n                    mesh.position = new BABYLON.Vector3(\n                        posX + this.xOffset,\n                        posY + this.yOffset,\n                        posZ + this.zOffset\n                    );\n                    const meshMaterial = new BABYLON.StandardMaterial(\"characterMaterial\");\n                    meshMaterial.specularColor = new BABYLON.Color3(1 ,1 ,1);\n                    meshMaterial.diffuseColor = new BABYLON.Color3(1, 0.6, 0);\n                    meshMaterial.backFaceCulling = false;\n                    meshMaterial.ambientColor = new BABYLON.Color3(0.23, 0.98, 0.53);\n\n                    mesh.material = meshMaterial;\n                    mesh.setParent(this.mesh);\n                });\n            }\n        );\n    }\n\n    walk = () => {\n        // Determine the move axis and move direction\n        const moveAxis = this.characterFaceDirection % 2 === 0 ? \"z\" : \"x\";\n        const moveDirection = this.characterFaceDirection >=2 ? 1 : -1;\n\n        const walkAnimation = new BABYLON.Animation(\n            \"characterTurnleft\",\n            `position.${moveAxis}`,\n            Globals.framerate,\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT,\n            BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n        );\n\n        const walkKeyframes = [];\n        walkKeyframes.push({\n            frame: 0,\n            value: moveAxis === \"x\" ? this.mesh.position.x : this.mesh.position.z\n        });\n        walkKeyframes.push({\n            frame: this.animationSpeed * Globals.framerate,\n            value: (moveAxis === \"x\" ? this.mesh.position.x : this.mesh.position.z) + moveDirection\n        });\n\n        walkAnimation.setKeys(walkKeyframes);\n\n        // Pop the last animation before adding another one\n        if (this.mesh.animations.length > 0)\n            this.mesh.animations.pop();\n        this.mesh.animations.push(walkAnimation);\n\n        Globals.scene.beginAnimation(this.mesh, 0, this.animationSpeed * Globals.framerate, false);\n        this.idleAnimation.stop();\n        this.walkingAnimation.start(false, 2.0, this.walkingAnimation.from, this.walkingAnimation.to, false);\n        \n        // Stop animation after finished walking\n        setTimeout(() => {\n            this.walkingAnimation.stop();\n            this.idleAnimation.start(true, 1.0, this.idleAnimation.from, this.idleAnimation.to, false);\n        }, this.animationSpeed * 1000);\n    }\n\n    turnLeft = () => {\n        // Update the direction of the character\n        if (this.characterFaceDirection === 0)\n            this.characterFaceDirection = 3;\n        else\n            this.characterFaceDirection = Math.abs((this.characterFaceDirection - 1) % 4);\n        console.log(`Rotating player to ${this.characterFaceDirection}`);\n\n        const turnLeftAnimation = new BABYLON.Animation(\n            \"characterTurnleft\",\n            \"rotation.y\",\n            Globals.framerate,\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT,\n            BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n        );\n\n        const turnLeftKeyframes = [];\n        turnLeftKeyframes.push({\n            frame: 0,\n            value: this.mesh.rotation.y\n        });\n        turnLeftKeyframes.push({\n            frame: this.animationSpeed * Globals.framerate,\n            value: this.mesh.rotation.y - Math.PI/2\n        });\n\n        turnLeftAnimation.setKeys(turnLeftKeyframes);\n        \n        // Pop the last animation before adding another one\n        if (this.mesh.animations.length > 0)\n            this.mesh.animations.pop();\n        this.mesh.animations.push(turnLeftAnimation);\n\n        Globals.scene.beginAnimation(this.mesh, 0, this.animationSpeed * Globals.framerate, false);\n    }\n\n    turnRight = () => {\n        // Update the direction of the character\n        this.characterFaceDirection = Math.abs((this.characterFaceDirection + 1) % 4);\n        console.log(`Rotating player to ${this.characterFaceDirection}`);\n\n        const turnRightAnimation = new BABYLON.Animation(\n            \"characterTurnleft\",\n            \"rotation.y\",\n            Globals.framerate,\n            BABYLON.Animation.ANIMATIONTYPE_FLOAT,\n            BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE\n        );\n\n        const turnRightKeyframes = [];\n        turnRightKeyframes.push({\n            frame: 0,\n            value: this.mesh.rotation.y\n        });\n        turnRightKeyframes.push({\n            frame: this.animationSpeed * Globals.framerate,\n            value: this.mesh.rotation.y + Math.PI/2\n        });\n\n        turnRightAnimation.setKeys(turnRightKeyframes);\n        \n        // Pop the last animation before adding another one\n        if (this.mesh.animations.length > 0)\n            this.mesh.animations.pop();\n        this.mesh.animations.push(turnRightAnimation);\n\n        Globals.scene.beginAnimation(this.mesh, 0, this.animationSpeed * Globals.framerate, false);\n    }\n    \n    render = () => {\n        return (\n            <div>\n                {/* <button onClick={this.walk}>PRESS ME DADDY</button>\n                <button onClick={this.turnLeft}>Turn Left</button>\n                <button onClick={this.turnRight}>Turn Right</button> */}\n            </div>\n        )\n    }\n}\n\nexport default Character\n","import React, { Component } from 'react'\n\nclass CodeEngine extends Component {\n    render() {\n        return (\n            <div className=\"codeEngine\">\n                placeholder\n            </div>\n        )\n    }\n}\n\nexport default CodeEngine\n","import React, { Component } from 'react';\n\nclass LevelTitle extends Component {\n    render() {\n        return (\n            <div className=\"titlePanel\">\n                <h1>{this.props.heading}</h1>\n                <p>{this.props.subheading}</p>\n            </div>\n        )\n    }\n}\n\nexport default LevelTitle\n","import React, { Component } from 'react';\n\nclass LevelInstructions extends Component {\n    render = () => {\n        return (\n            <div className=\"instructionsPanel\">\n                <div className=\"instructionsHeading\">\n                    Instructions\n                </div>\n                <p>{this.props.children}</p>\n            </div>\n        )\n    }\n}\n\nexport default LevelInstructions\n","import React, { Component } from 'react';\nimport ENVIRONMENT from '../gameObjects/_ENVIRONMENT';\n\n// Babylon Objects\nimport StoneBlock from '../gameObjects/StoneBlock';\nimport GrassBlock from '../gameObjects/GrassBlock';\nimport Character from '../gameObjects/Character';\n\n// UI and Code Engine\nimport CodeEngine from '../codeEngine/CodeEngine';\nimport LevelTitle from '../uiElements/LevelTitle';\nimport LevelInstructions from '../uiElements/LevelInstructions';\n\nclass LevelOne extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            environmentSpawned: false\n        }\n\n        // level[y][x][z]\n        this.level = [ \n            [   // First Layer\n                [0, 0, 1, 0, 0],\n                [0, 1, 1, 1, 0],\n                [1, 1, 1, 1, 1],\n                [0, 1, 1, 1, 0],\n                [0, 0, 1, 0, 0],\n            ],\n            [   // Second Layer\n                [0, 1, 1, 1, 0],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [0, 1, 1, 1, 0],\n            ],\n            [   // ...\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1],\n            ],\n            [\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2],\n            ]\n        ]\n        this.yOffset = 3;\n    }\n\n    componentDidMount() {\n        \n    }\n\n    spawnEnvironmentItem(x, y, z, type) {\n        // Apply y spawn offset\n        y -= this.yOffset;\n\n        switch(type) {\n            case ENVIRONMENT.NONE:\n                return <div></div>\n            case ENVIRONMENT.STONE:\n                return <StoneBlock posX={x} posY={y} posZ={z} yOffset={this.yOffset}/>;\n            case ENVIRONMENT.GRASS:\n                return <GrassBlock posX={x} posY={y} posZ={z} yOffset={this.yOffset}/>;\n            default:\n                return <div></div>;\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {/* Level Details */}\n                <div className=\"levelPanel\">\n                    <LevelTitle heading=\"Level One\" subheading=\"The Basics\"/>\n                    <CodeEngine/>\n                    <LevelInstructions>\n                        <b>Welcome to your first level!</b><br/>\n                        To complete this level, you need to walk the\n                        character to the finish line using functions. \n                        To add a function, press the plus button above.\n                    </LevelInstructions>\n                </div>\n\n                {/* Spawn map environment */}\n                {\n                    // Spawn the map according to this.level\n                    this.level.map((yData, yIndex) => {\n                        return <div className={`env_y_${yIndex}`} key={yIndex}> {\n                            yData.map((xData, xIndex) => {\n                                return <div className={`env_x_${xIndex}`} key={xIndex}> {\n                                    xData.map((zData, zIndex) => {\n                                        return <div className={`env_z_${zIndex}`} key={zIndex}> {\n                                            this.spawnEnvironmentItem(\n                                                xIndex, yIndex, zIndex, zData\n                                            )\n                                        } </div>\n                                    })\n                                } </div>\n                            })\n                        } </div>\n                    })\n                }\n\n                {/* Spawn player object */}\n                <Character posX={0} posY={1} posZ={0}/>\n            </div>\n        )\n    }\n}\n\nexport default LevelOne\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport 'babylonjs-loaders';\nimport BabylonCanvas from './BabylonCanvas';\nimport Navbar from './components/Navbar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n// Levels\nimport LevelOne from './components/levels/LevelOne';\n\nclass App extends Component {\n    state = {  }\n\n    render() {\n        return (\n            <Router>\n                <div className=\"App\">\n                    <Navbar/>\n                    <ul style={{color: \"white\"}}>\n                        <li>Show Debugger: [</li>\n                        <li>Hide Debugger: ]</li>\n                        <li><Link to=\"/cg-final-project/\">Load Main Menu</Link></li>\n                        <li><Link to=\"/cg-final-project/level-1\">Load Level 1</Link></li>\n                    </ul>\n                    <div className=\"AppContainer\">\n                        <BabylonCanvas/>\n                        <Switch className=\"LevelContainer\">\n                            {/* <Route path=\"/\"> */}\n                                {/* Create main menu scene */}\n                            {/* </Route> */}\n                            <Route path=\"/cg-final-project/level-1\">\n                                <LevelOne/>\n                            </Route>\n                        </Switch>\n                    </div>\n                </div>\n            </Router>\n        )\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}